<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceidol_1_1BranchingRules" kind="namespace" language="C++">
    <compoundname>idol::BranchingRules</compoundname>
    <innerclass refid="classidol_1_1BranchingRules_1_1BranchingWithPriority" prot="public">idol::BranchingRules::BranchingWithPriority</innerclass>
    <innerclass refid="classidol_1_1BranchingRules_1_1Diver" prot="public">idol::BranchingRules::Diver</innerclass>
    <innerclass refid="classidol_1_1BranchingRules_1_1FirstInfeasibleFound" prot="public">idol::BranchingRules::FirstInfeasibleFound</innerclass>
    <innerclass refid="classidol_1_1BranchingRules_1_1LeastInfeasible" prot="public">idol::BranchingRules::LeastInfeasible</innerclass>
    <innerclass refid="classidol_1_1BranchingRules_1_1MostInfeasible" prot="public">idol::BranchingRules::MostInfeasible</innerclass>
    <innerclass refid="classidol_1_1BranchingRules_1_1PseudoCost" prot="public">idol::BranchingRules::PseudoCost</innerclass>
    <innerclass refid="classidol_1_1BranchingRules_1_1StrongBranching" prot="public">idol::BranchingRules::StrongBranching</innerclass>
    <innerclass refid="classidol_1_1BranchingRules_1_1UniformlyRandom" prot="public">idol::BranchingRules::UniformlyRandom</innerclass>
    <innerclass refid="classidol_1_1BranchingRules_1_1VariableBranching" prot="public">idol::BranchingRules::VariableBranching</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingWithPriority.h" line="15" column="1"/>
  </compounddef>
</doxygen>
