<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classidol_1_1Optimizers_1_1BranchAndBound" kind="class" language="C++" prot="public">
    <compoundname>idol::Optimizers::BranchAndBound</compoundname>
    <basecompoundref refid="classidol_1_1Algorithm" prot="public" virt="non-virtual">idol::Algorithm</basecompoundref>
    <templateparamlist>
      <param>
        <type>class NodeInfoT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classidol_1_1Optimizers_1_1BranchAndBound_1a63ec1073fe118dfa89330fc7788936a3" prot="private" static="no">
        <type><ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt;</type>
        <definition>using idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::TreeNode =  Node&lt;NodeInfoT&gt;</definition>
        <argsstring></argsstring>
        <name>TreeNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="31" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classidol_1_1Optimizers_1_1BranchAndBound_1a2cb6d13b4ee875beeb4da1d87bf4b019" prot="private" static="no">
        <type><ref refid="classidol_1_1NodeSet" kindref="compound">NodeSet</ref>&lt; <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &gt;</type>
        <definition>using idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::SetOfActiveNodes =  NodeSet&lt;Node&lt;NodeInfoT&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>SetOfActiveNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="32" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1ab0aee0f24d91dcbe0f7c14343e272abd" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classidol_1_1OptimizerFactory" kindref="compound">OptimizerFactory</ref> &gt;</type>
        <definition>std::unique_ptr&lt;OptimizerFactory&gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_relaxation_optimizer_factory</definition>
        <argsstring></argsstring>
        <name>m_relaxation_optimizer_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="34" column="21" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a8d36c9dc2a7a7501f69031760e8c9753" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_n_threads</definition>
        <argsstring></argsstring>
        <name>m_n_threads</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="36" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a26cf8ca6348869000264077044c74bd7" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;Model&gt; &gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_relaxations</definition>
        <argsstring></argsstring>
        <name>m_relaxations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="37" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1ab6692730e3450a112a1c237523dcc2e0" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classidol_1_1NodeUpdator" kindref="compound">NodeUpdator</ref>&lt; NodeInfoT &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;NodeUpdator&lt;NodeInfoT&gt; &gt; &gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_node_updators</definition>
        <argsstring></argsstring>
        <name>m_node_updators</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="38" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a17bd93cb0cf0312468100d96d25e842e" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classidol_1_1BranchingRule" kindref="compound">BranchingRule</ref>&lt; NodeInfoT &gt; &gt;</type>
        <definition>std::unique_ptr&lt;BranchingRule&lt;NodeInfoT&gt; &gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_branching_rule</definition>
        <argsstring></argsstring>
        <name>m_branching_rule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="40" column="21" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a40951845ca9775ed7f4fa65bf7d94722" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classidol_1_1NodeSelectionRule" kindref="compound">NodeSelectionRule</ref>&lt; NodeInfoT &gt; &gt;</type>
        <definition>std::unique_ptr&lt;NodeSelectionRule&lt;NodeInfoT&gt; &gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_node_selection_rule</definition>
        <argsstring></argsstring>
        <name>m_node_selection_rule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="41" column="21" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a79661af0fa1d0ec24d0b246c3a6bdad6" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; typename <ref refid="classidol_1_1Logs_1_1BranchAndBound_1_1Factory" kindref="compound">Logs::BranchAndBound::Factory</ref>&lt; NodeInfoT &gt;::Strategy &gt;</type>
        <definition>std::unique_ptr&lt;typename Logs::BranchAndBound::Factory&lt;NodeInfoT&gt;::Strategy&gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_logger</definition>
        <argsstring></argsstring>
        <name>m_logger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="42" column="22" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a26d2bbd5c4df988bc8437bcdce88b8c4" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classidol_1_1AbstractBranchAndBoundCallbackI" kindref="compound">AbstractBranchAndBoundCallbackI</ref>&lt; NodeInfoT &gt; &gt;</type>
        <definition>std::unique_ptr&lt;AbstractBranchAndBoundCallbackI&lt;NodeInfoT&gt; &gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_callback</definition>
        <argsstring></argsstring>
        <name>m_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="44" column="21" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a4964d41e3e6f4f0e4d2c39a8c5f62ca9" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_has_integer_objective</definition>
        <argsstring></argsstring>
        <name>m_has_integer_objective</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="46" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a028eb8da485911e5635cbba0c883199b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt;unsigned int&gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_steps</definition>
        <argsstring></argsstring>
        <name>m_steps</name>
        <initializer>= { std::numeric_limits&lt;unsigned int&gt;::max(), 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="47" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1ac17c1fb1cfcb6271db4b6addbe341b74" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_n_created_nodes</definition>
        <argsstring></argsstring>
        <name>m_n_created_nodes</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="48" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a5bc7e7073d3affa118b4f222230f713a" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_n_solved_nodes</definition>
        <argsstring></argsstring>
        <name>m_n_solved_nodes</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="49" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a21d81bd5126ecb32dc853121860eef74" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_n_active_nodes</definition>
        <argsstring></argsstring>
        <name>m_n_active_nodes</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="50" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a17ed475008bdf48d715ddfb6900c2bd2" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_root_node_best_bound</definition>
        <argsstring></argsstring>
        <name>m_root_node_best_bound</name>
        <initializer>= -Inf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="51" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1aafd0b4c15635ff9460f9edceb31348c4" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_root_node_best_obj</definition>
        <argsstring></argsstring>
        <name>m_root_node_best_obj</name>
        <initializer>= +Inf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="52" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1Optimizers_1_1BranchAndBound_1a16168f97559cd68586993ec0965f973b" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="classidol_1_1Node" kindref="compound">TreeNode</ref> &gt;</type>
        <definition>std::optional&lt;TreeNode&gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::m_incumbent</definition>
        <argsstring></argsstring>
        <name>m_incumbent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="54" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a6db70f15ec2cb0c8c984c06439277119" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::build</definition>
        <argsstring>() override</argsstring>
        <name>build</name>
        <reimplements refid="classidol_1_1Algorithm_1a7827fa271c95cd5bfd474af2a702c094">build</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="56" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="419" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a6011ffe600f70985dbb808dda523ac73" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::hook_before_optimize</definition>
        <argsstring>() override</argsstring>
        <name>hook_before_optimize</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a59c7ad8b4b2f9700649bbf008a7876ed">hook_before_optimize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="57" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="473" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1ae9dbab65f83174e747d5589fcb7e896f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::hook_optimize</definition>
        <argsstring>() override</argsstring>
        <name>hook_optimize</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1aac4fef8007f641e8226be51f92075fde">hook_optimize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="58" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="500" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1ab5e0516fa7a86d515d196c48f62d4444" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::hook_after_optimize</definition>
        <argsstring>() override</argsstring>
        <name>hook_after_optimize</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1aef37b30f99f5a244584039750d0ba140">hook_after_optimize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="59" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="543" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a1fd3cc4e69e87ee91b1cc60be6e6ea0e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::add</definition>
        <argsstring>(const Var &amp;t_var) override</argsstring>
        <name>add</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1ac5e35eec35d2dea0b90fcabd30485179">add</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="60" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="884" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a80b374ce80cb85435cdac56833ae5e26" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::add</definition>
        <argsstring>(const Ctr &amp;t_ctr) override</argsstring>
        <name>add</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1ae1266859ae2679d14d22bb7449dbbe8b">add</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="61" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="877" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a873e0f526c708b2cc8168dd32ebacc14" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::add</definition>
        <argsstring>(const QCtr &amp;t_ctr) override</argsstring>
        <name>add</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1afa9e27c1db69ebe4688fd4ba37ba3121">add</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1QCtr" kindref="compound">QCtr</ref> &amp;</type>
          <declname>t_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="62" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1ac8ff89b9c65167786d2e5aeec5d2fe52" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::remove</definition>
        <argsstring>(const Var &amp;t_var) override</argsstring>
        <name>remove</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a922c443d01523ee75f16f8cba99ee159">remove</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="63" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="870" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a103298527511b23f601d9b3d3e011794" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::remove</definition>
        <argsstring>(const Ctr &amp;t_ctr) override</argsstring>
        <name>remove</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a5c021fd9b686acbb6d3b8ee38c7eff9c">remove</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="64" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="863" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1afd79a4ae68ed85ae558b7bf3706d08dd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::remove</definition>
        <argsstring>(const QCtr &amp;t_ctr) override</argsstring>
        <name>remove</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a8f30740f64bd1bac13b7de206e781c7b">remove</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1QCtr" kindref="compound">QCtr</ref> &amp;</type>
          <declname>t_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="65" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1af9fee47df71cb4269f75256290d24a36" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a96d15823685c0e6d2966ef35b26a9503">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="66" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="856" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1aa0f036cd4df87874a9856448b5f72b7c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::write</definition>
        <argsstring>(const std::string &amp;t_name) override</argsstring>
        <name>write</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a799b0b5d874b3558c48e4d1cef6013a8">write</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="67" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="820" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1aa10759216c61f49ddc34c3870a99de30" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::detect_integer_objective</definition>
        <argsstring>()</argsstring>
        <name>detect_integer_objective</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="69" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="195" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a198e066b9bfd97c55546b64a757a3b28" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::create_relaxations</definition>
        <argsstring>()</argsstring>
        <name>create_relaxations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="70" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="442" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a342fde6805ee14d80fbdc55c1076877d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt;</type>
        <definition>idol::Node&lt; NodeInfoT &gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::create_root_node</definition>
        <argsstring>()</argsstring>
        <name>create_root_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="71" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="462" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1ae8e5b133a79d74435dd1b3dc52d8f41e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::explore</definition>
        <argsstring>(TreeNode &amp;t_node, unsigned int t_relaxation_id, SetOfActiveNodes &amp;t_active_nodes, unsigned int t_step)</argsstring>
        <name>explore</name>
        <param>
          <type><ref refid="classidol_1_1Node" kindref="compound">TreeNode</ref> &amp;</type>
          <declname>t_node</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>t_relaxation_id</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1NodeSet" kindref="compound">SetOfActiveNodes</ref> &amp;</type>
          <declname>t_active_nodes</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>t_step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="72" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="552" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a0d1c27be504be7243932ff591fac2eb5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::analyze</definition>
        <argsstring>(const TreeNode &amp;t_node, unsigned int t_relaxation_id, bool *t_explore_children_flag, bool *t_reoptimize_flag)</argsstring>
        <name>analyze</name>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">TreeNode</ref> &amp;</type>
          <declname>t_node</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>t_relaxation_id</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>t_explore_children_flag</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>t_reoptimize_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="73" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="669" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a4aa0cbd21aa9c9dd502dff68e267b9e5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt;</type>
        <definition>idol::Node&lt; NodeInfoT &gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::select_node_for_branching</definition>
        <argsstring>(SetOfActiveNodes &amp;t_active_nodes)</argsstring>
        <name>select_node_for_branching</name>
        <param>
          <type><ref refid="classidol_1_1NodeSet" kindref="compound">SetOfActiveNodes</ref> &amp;</type>
          <declname>t_active_nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="74" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="812" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a4459c7f3f13a667acac838bf2689e561" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classidol_1_1Node" kindref="compound">TreeNode</ref> &gt;</type>
        <definition>std::vector&lt; idol::Node&lt; NodeInfoT &gt; &gt; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::create_child_nodes</definition>
        <argsstring>(const TreeNode &amp;t_node)</argsstring>
        <name>create_child_nodes</name>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">TreeNode</ref> &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="75" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="825" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a4437a33ea5cae5e5f384a3491dea6a96" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::backtrack</definition>
        <argsstring>(SetOfActiveNodes &amp;t_actives_nodes, SetOfActiveNodes &amp;t_sub_active_nodes)</argsstring>
        <name>backtrack</name>
        <param>
          <type><ref refid="classidol_1_1NodeSet" kindref="compound">SetOfActiveNodes</ref> &amp;</type>
          <declname>t_actives_nodes</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1NodeSet" kindref="compound">SetOfActiveNodes</ref> &amp;</type>
          <declname>t_sub_active_nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="76" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="848" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1aa890cfaf24f31f7aab7d5de062366e5b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::set_as_incumbent</definition>
        <argsstring>(const TreeNode &amp;t_node)</argsstring>
        <name>set_as_incumbent</name>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">TreeNode</ref> &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="77" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="764" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a5838e061b34b616964424b2360217219" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::gap_is_closed</definition>
        <argsstring>() const</argsstring>
        <name>gap_is_closed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="78" column="11" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="842" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a8ef3f923cffe9cfe01956ef0815e2e04" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::prune_nodes_by_bound</definition>
        <argsstring>(SetOfActiveNodes &amp;t_active_nodes)</argsstring>
        <name>prune_nodes_by_bound</name>
        <param>
          <type><ref refid="classidol_1_1NodeSet" kindref="compound">SetOfActiveNodes</ref> &amp;</type>
          <declname>t_active_nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="79" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="786" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1ac2a710630b1a4f4fface40c9152d33fa" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_lower_bound</definition>
        <argsstring>(const SetOfActiveNodes &amp;t_active_nodes)</argsstring>
        <name>update_lower_bound</name>
        <param>
          <type>const <ref refid="classidol_1_1NodeSet" kindref="compound">SetOfActiveNodes</ref> &amp;</type>
          <declname>t_active_nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="80" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="772" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a6e6fa910c383dfb1c91cb31f297de727" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::is_valid</definition>
        <argsstring>(const TreeNode &amp;t_node) const</argsstring>
        <name>is_valid</name>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">TreeNode</ref> &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="81" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="181" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1abc30f2d0e0c46460fa5ad797cecd631b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::log_node_after_solve</definition>
        <argsstring>(const Node&lt; NodeInfoT &gt; &amp;t_node)</argsstring>
        <name>log_node_after_solve</name>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="83" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1adb1d735706e3da24ce2f77c0e7d909cf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::log_after_termination</definition>
        <argsstring>()</argsstring>
        <name>log_after_termination</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="84" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="223" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a7a7e5e3b53ebd986ad121ac72f9d00cc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structidol_1_1SideEffectRegistry" kindref="compound">SideEffectRegistry</ref></type>
        <definition>idol::SideEffectRegistry idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::call_callbacks</definition>
        <argsstring>(CallbackEvent t_event, const TreeNode &amp;t_node, unsigned int t_relaxation_id)</argsstring>
        <name>call_callbacks</name>
        <param>
          <type>CallbackEvent</type>
          <declname>t_event</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">TreeNode</ref> &amp;</type>
          <declname>t_node</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>t_relaxation_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="86" column="24" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="404" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a9289ef61be6aadb88a821c2747fa87ee" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_obj_sense</definition>
        <argsstring>() override</argsstring>
        <name>update_obj_sense</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a25a53345053496a7fadd9648df49d254">update_obj_sense</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="87" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="330" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a8a5fed86e0a7297642704a7e399a8526" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_obj</definition>
        <argsstring>() override</argsstring>
        <name>update_obj</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1ab0f43a11a4c92dbd420df4083f074fd5">update_obj</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="88" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="260" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1ae296c17ab6b0f177142ce71957fe9ae1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_rhs</definition>
        <argsstring>() override</argsstring>
        <name>update_rhs</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a1cbf5571c1dec27a41a6e9f0e19db124">update_rhs</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="89" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="267" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a5299afcf4f801f2773c54915caada951" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_obj_constant</definition>
        <argsstring>() override</argsstring>
        <name>update_obj_constant</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a649970fd70f822ff3565118b23503a18">update_obj_constant</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="90" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a19aebade58013182ee08135a59243b28" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_mat_coeff</definition>
        <argsstring>(const Ctr &amp;t_ctr, const Var &amp;t_var) override</argsstring>
        <name>update_mat_coeff</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1abbbeaecd791d91037912dbea1cc3abe4">update_mat_coeff</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_ctr</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="91" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="281" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1aee9f0ad78d68e9f4d17f79941a6a2150" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_ctr_type</definition>
        <argsstring>(const Ctr &amp;t_ctr) override</argsstring>
        <name>update_ctr_type</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a052484a0897b8994517805c284b12cb6">update_ctr_type</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="92" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="288" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a251ce2dccb97b40598b263388f6697e5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_ctr_rhs</definition>
        <argsstring>(const Ctr &amp;t_ctr) override</argsstring>
        <name>update_ctr_rhs</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1abbdd8996efcaf9e25066f38ceb6d1a94">update_ctr_rhs</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="93" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="295" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1ae2d64176d0ee067f9bca4120093279e4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_var_type</definition>
        <argsstring>(const Var &amp;t_var) override</argsstring>
        <name>update_var_type</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a06c4c149d5a16be2a7bf436e3c94cdc2">update_var_type</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="94" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="302" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a7b120e8fcdc53bc85daf31f4fe13f343" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_var_lb</definition>
        <argsstring>(const Var &amp;t_var) override</argsstring>
        <name>update_var_lb</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1aef3dabf3018202b60d9ae6254c481700">update_var_lb</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="95" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="309" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a504c169b5b218a2931944a2e7cdebfe9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_var_ub</definition>
        <argsstring>(const Var &amp;t_var) override</argsstring>
        <name>update_var_ub</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1aa6384ec94a6006df19907e140b8e3f67">update_var_ub</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="96" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="316" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1afe460d5f77132e31d38dae319d545b24" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::update_var_obj</definition>
        <argsstring>(const Var &amp;t_var) override</argsstring>
        <name>update_var_obj</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1ae226b270b4aafede630156e30f41fea7">update_var_obj</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="98" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="323" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a2bbe7a8e0e19e8b5b58854644abca316" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::set_status</definition>
        <argsstring>(SolutionStatus t_status) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classidol_1_1Algorithm_1afa4fa983d18213614037fa92484bf24c">set_status</reimplements>
        <param>
          <type>SolutionStatus</type>
          <declname>t_status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="99" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="909" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1aa5d39f44ee786a92f6e4e70010ba8cc3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::set_reason</definition>
        <argsstring>(SolutionReason t_reason) override</argsstring>
        <name>set_reason</name>
        <reimplements refid="classidol_1_1Algorithm_1a82ae81a413801e3467a528d6723ef98b">set_reason</reimplements>
        <param>
          <type>SolutionReason</type>
          <declname>t_reason</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="100" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="903" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1abc95e0b9763d2184a1d2b2375f0856ba" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::set_best_bound</definition>
        <argsstring>(double t_value) override</argsstring>
        <name>set_best_bound</name>
        <reimplements refid="classidol_1_1Algorithm_1a1a093633b2534aaea279a13506e15b94">set_best_bound</reimplements>
        <param>
          <type>double</type>
          <declname>t_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="101" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="897" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a29b5fea1ee24213bc1995546a3d8a874" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::set_best_obj</definition>
        <argsstring>(double t_value) override</argsstring>
        <name>set_best_obj</name>
        <reimplements refid="classidol_1_1Algorithm_1a42b635afff87af2e867b53c66bf5bfc5">set_best_obj</reimplements>
        <param>
          <type>double</type>
          <declname>t_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="102" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="891" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a86735e064591fb4f00c3499a4b51de87" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::add</definition>
        <argsstring>(const SOSCtr &amp;t_ctr)</argsstring>
        <name>add</name>
        <reimplementedby refid="classidol_1_1OptimizerWithLazyUpdates_1a486aca612e6750e004ac078a9dea0d43">add</reimplementedby>
        <reimplementedby refid="classidol_1_1OptimizerWithLazyUpdates_1a486aca612e6750e004ac078a9dea0d43">add</reimplementedby>
        <reimplementedby refid="classidol_1_1OptimizerWithLazyUpdates_1a486aca612e6750e004ac078a9dea0d43">add</reimplementedby>
        <param>
          <type>const <ref refid="classidol_1_1SOSCtr" kindref="compound">SOSCtr</ref> &amp;</type>
          <declname>t_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="57" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a29b91a6040358d614f50b592917baf39" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::remove</definition>
        <argsstring>(const SOSCtr &amp;t_ctr)</argsstring>
        <name>remove</name>
        <reimplementedby refid="classidol_1_1OptimizerWithLazyUpdates_1a0552e16fd81c78e261f7031cfeb20d92">remove</reimplementedby>
        <reimplementedby refid="classidol_1_1OptimizerWithLazyUpdates_1a0552e16fd81c78e261f7031cfeb20d92">remove</reimplementedby>
        <reimplementedby refid="classidol_1_1OptimizerWithLazyUpdates_1a0552e16fd81c78e261f7031cfeb20d92">remove</reimplementedby>
        <param>
          <type>const <ref refid="classidol_1_1SOSCtr" kindref="compound">SOSCtr</ref> &amp;</type>
          <declname>t_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="64" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a23401d6f4b9166f7d941a696d4cef2e9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::impl::Optimizer::optimize</definition>
        <argsstring>()</argsstring>
        <name>optimize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="72" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a1cd9c2c4668b797b9559e1cc7b08f238" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::BranchAndBound</definition>
        <argsstring>(const Model &amp;t_model, const OptimizerFactory &amp;t_node_optimizer, const BranchingRuleFactory&lt; NodeInfoT &gt; &amp;t_branching_rule_factory, const NodeSelectionRuleFactory&lt; NodeInfoT &gt; &amp;t_node_selection_rule_factory, AbstractBranchAndBoundCallbackI&lt; NodeInfoT &gt; *t_callback, const Logs::BranchAndBound::Factory&lt; NodeInfoT &gt; &amp;t_logger_factory)</argsstring>
        <name>BranchAndBound</name>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_model</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1OptimizerFactory" kindref="compound">OptimizerFactory</ref> &amp;</type>
          <declname>t_node_optimizer</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1BranchingRuleFactory" kindref="compound">BranchingRuleFactory</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_branching_rule_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1NodeSelectionRuleFactory" kindref="compound">NodeSelectionRuleFactory</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_node_selection_rule_factory</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AbstractBranchAndBoundCallbackI" kindref="compound">AbstractBranchAndBoundCallbackI</ref>&lt; NodeInfoT &gt; *</type>
          <declname>t_callback</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Logs_1_1BranchAndBound_1_1Factory" kindref="compound">Logs::BranchAndBound::Factory</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_logger_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="104" column="14" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="424" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a8748ceb07cfbfb02085b70e32b86d3c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a1f208d4de2375b957812c36009a9a900">name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="111" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a3208dbf50b43af7b319121419a85f049" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::solve</definition>
        <argsstring>(TreeNode &amp;t_node, unsigned int t_relaxation_id) const</argsstring>
        <name>solve</name>
        <param>
          <type><ref refid="classidol_1_1Node" kindref="compound">TreeNode</ref> &amp;</type>
          <declname>t_node</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>t_relaxation_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="113" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="639" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1af890c079f5525dc55300ea653cebf4a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::set_subtree_depth</definition>
        <argsstring>(unsigned int t_depth)</argsstring>
        <name>set_subtree_depth</name>
        <param>
          <type>unsigned int</type>
          <declname>t_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="115" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a1618661b3e6c3ebe2891627dd48965ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::subtree_depth</definition>
        <argsstring>() const</argsstring>
        <name>subtree_depth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="117" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a48081539ede05515c9775869ef262ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::add_callback</definition>
        <argsstring>(BranchAndBoundCallback&lt; NodeInfoT &gt; *t_cb)</argsstring>
        <name>add_callback</name>
        <param>
          <type><ref refid="classidol_1_1BranchAndBoundCallback" kindref="compound">BranchAndBoundCallback</ref>&lt; NodeInfoT &gt; *</type>
          <declname>t_cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="119" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="414" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a287eafb5422cc31517e980a9c2ab4d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::submit_heuristic_solution</definition>
        <argsstring>(NodeInfoT *t_info)</argsstring>
        <name>submit_heuristic_solution</name>
        <param>
          <type>NodeInfoT *</type>
          <declname>t_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="121" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="383" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1abaea16c748bf8107f00bd258458c5d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::submit_lower_bound</definition>
        <argsstring>(double t_lower_bound)</argsstring>
        <name>submit_lower_bound</name>
        <param>
          <type>double</type>
          <declname>t_lower_bound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="123" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="369" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a8b404e43673ce816259b4252aee946c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::n_created_nodes</definition>
        <argsstring>() const</argsstring>
        <name>n_created_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="125" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a422467890daca36468b8ab86fdb20349" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::n_solved_nodes</definition>
        <argsstring>() const</argsstring>
        <name>n_solved_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="127" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a84f1675b5fe0ac866684c5995c5b64c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::n_active_nodes</definition>
        <argsstring>() const</argsstring>
        <name>n_active_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="129" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a012177d59075e1ef6b228f8ed4eea2a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
        <definition>const Model&amp; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::relaxation</definition>
        <argsstring>() const</argsstring>
        <name>relaxation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="131" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1ae073937bc0c78fb4da23187b8bb75893" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
        <definition>Model&amp; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::relaxation</definition>
        <argsstring>()</argsstring>
        <name>relaxation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="133" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a2a6675392a782f7c1632cd7227174f6b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::root_node_best_bound</definition>
        <argsstring>() const</argsstring>
        <name>root_node_best_bound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="135" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a886a4a18923a7140fb1bb86055daf5ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::root_node_best_obj</definition>
        <argsstring>() const</argsstring>
        <name>root_node_best_obj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="137" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1adb2e8a91ca2e0a0058c4780228806559" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classidol_1_1BranchingRule" kindref="compound">BranchingRule</ref>&lt; NodeInfoT &gt; &amp;</type>
        <definition>BranchingRule&lt;NodeInfoT&gt;&amp; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::branching_rule</definition>
        <argsstring>()</argsstring>
        <name>branching_rule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="139" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1af3c6c4331126c83ea8311c93f2a25854" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classidol_1_1BranchingRule" kindref="compound">BranchingRule</ref>&lt; NodeInfoT &gt; &amp;</type>
        <definition>const BranchingRule&lt;NodeInfoT&gt;&amp; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::branching_rule</definition>
        <argsstring>() const</argsstring>
        <name>branching_rule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="141" column="25" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1aaab698227d1e8cabb063a0b588271ed2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::has_incumbent</definition>
        <argsstring>() const</argsstring>
        <name>has_incumbent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="143" column="11" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1ac723320a8b891069ade456b86b8fbfd1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classidol_1_1Node" kindref="compound">TreeNode</ref> &amp;</type>
        <definition>const TreeNode&amp; idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::incumbent</definition>
        <argsstring>() const</argsstring>
        <name>incumbent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="145" column="20" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a20053f799baabfa99c162dab24198108" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::get_var_primal</definition>
        <argsstring>(const Var &amp;t_var) const override</argsstring>
        <name>get_var_primal</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a4067491b572c01dbd56944809c2ee26f">get_var_primal</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="147" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="359" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1aea3edaeb10dec423f7e2f55c6ba6097d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::get_var_reduced_cost</definition>
        <argsstring>(const Var &amp;t_var) const override</argsstring>
        <name>get_var_reduced_cost</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a251f4d7d32c83135d3997d72d1ed719c">get_var_reduced_cost</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="149" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="215" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a292bd3bfa4745858f9b7f2b92cbebd6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::get_var_ray</definition>
        <argsstring>(const Var &amp;t_var) const override</argsstring>
        <name>get_var_ray</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1ad21a943630920c4e618b7f7450d2668b">get_var_ray</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="151" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="351" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1abeca80a9af8be162eb87afb627b6b666" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::get_ctr_dual</definition>
        <argsstring>(const Ctr &amp;t_ctr) const override</argsstring>
        <name>get_ctr_dual</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a146aa552ab6c5442d7ca49d29d806427">get_ctr_dual</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="153" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="343" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1afb8a0013775c0dbc5179f7df11c228e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::get_ctr_farkas</definition>
        <argsstring>(const Ctr &amp;t_ctr) const override</argsstring>
        <name>get_ctr_farkas</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1ae0cf7244a71914ddbb08ba8e0baba9ca">get_ctr_farkas</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="155" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="335" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a252d0043f3260f5e1fa6e3e1c7e47082" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>unsigned int</type>
        <definition>unsigned int idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::get_n_solutions</definition>
        <argsstring>() const override</argsstring>
        <name>get_n_solutions</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a0e98fd1255617e98e988ee41ca896e71">get_n_solutions</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="157" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="255" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1ac10fe7297bb4a07e5235619feb88d520" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>unsigned int</type>
        <definition>unsigned int idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::get_solution_index</definition>
        <argsstring>() const override</argsstring>
        <name>get_solution_index</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a4d4eb6b7c7885ecdfbae4c87da8d0661">get_solution_index</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="159" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a5bd6ade2b68ec8768bae2eefdccbb3eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::set_solution_index</definition>
        <argsstring>(unsigned int t_index) override</argsstring>
        <name>set_solution_index</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a9ad3e14177821752eb86c58195f1df46">set_solution_index</reimplements>
        <param>
          <type>unsigned int</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="161" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="243" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Optimizers_1_1BranchAndBound_1a4468720781d9278f1e2d6628a3a00e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;::terminate</definition>
        <argsstring>() override</argsstring>
        <name>terminate</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a475c1533824aef4fb8f427bc6a45546b">terminate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="163" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Algorithm_1aca1da2a76fe7439c2e5d990860ef4e0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SolutionStatus</type>
        <definition>SolutionStatus idol::Algorithm::get_status</definition>
        <argsstring>() const override</argsstring>
        <name>get_status</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1aba3f84c3dcd1f69e91c85606ef893b16">get_status</reimplements>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Robust_1_1AffineDecisionRule_1a04c88c2a639c94b2414f05ddf3d2b0f5">get_status</reimplementedby>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Robust_1_1Deterministic_1ad969dfe9ec5de34e8ba8ffdda7dcb389">get_status</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Algorithm.h" line="30" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Algorithm_1ae7e31752554b7d0ec5f77aed4e0bc46c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SolutionReason</type>
        <definition>SolutionReason idol::Algorithm::get_reason</definition>
        <argsstring>() const override</argsstring>
        <name>get_reason</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1afceabfe55118b54e898d766914186e77">get_reason</reimplements>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Robust_1_1AffineDecisionRule_1a1440a2af083785e62ccf349c7ba7a423">get_reason</reimplementedby>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Robust_1_1Deterministic_1afd1e761c1b12d90c6ff8a64d4c076a39">get_reason</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Algorithm.h" line="31" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Algorithm_1a0f622ce8c74e2207050de31504c34ada" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double idol::Algorithm::get_best_obj</definition>
        <argsstring>() const override</argsstring>
        <name>get_best_obj</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a3ddcd68d96101c4df494693cf883337c">get_best_obj</reimplements>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Robust_1_1AffineDecisionRule_1a0cfecf2430a2446ecbbac554cb8f9aba">get_best_obj</reimplementedby>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Robust_1_1Deterministic_1a2c3b5d6558ad1177087354484c093cf4">get_best_obj</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Algorithm.h" line="32" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Algorithm_1a4e6c0365b139516387e991f8e798e65e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double idol::Algorithm::get_best_bound</definition>
        <argsstring>() const override</argsstring>
        <name>get_best_bound</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a5eec9cc5da973fc5db74b4b6fb5ecd61">get_best_bound</reimplements>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Robust_1_1AffineDecisionRule_1a86c0533a9433708ab0ddda1ce1f34bb3">get_best_bound</reimplementedby>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Robust_1_1Deterministic_1aabad8904383ae9f91221c2f374150afb">get_best_bound</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Algorithm.h" line="33" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Algorithm_1a424a643bf34fdc305e5e14c32c60ebde" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double idol::Algorithm::get_relative_gap</definition>
        <argsstring>() const override</argsstring>
        <name>get_relative_gap</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a17d096d345b47194e85cc210351f45d5">get_relative_gap</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Algorithm.h" line="34" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1Algorithm_1ad65545801432ff973e15a47da2cb230e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double idol::Algorithm::get_absolute_gap</definition>
        <argsstring>() const override</argsstring>
        <name>get_absolute_gap</name>
        <reimplements refid="classidol_1_1impl_1_1Optimizer_1a266eddfc1b3aa4ee9a9231ecdf568337">get_absolute_gap</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Algorithm.h" line="35" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a6e2887215b92e97a30a74f4aa53dd2f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const ::<ref refid="classidol_1_1Model" kindref="compound">idol::Model</ref> &amp;</type>
        <definition>virtual const ::idol::Model&amp; idol::impl::Optimizer::parent</definition>
        <argsstring>() const</argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="110" column="34" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1acc87454b609268dc1ecf65a1ced765d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool idol::impl::Optimizer::get_param_logs</definition>
        <argsstring>() const</argsstring>
        <name>get_param_logs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="138" column="11" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a990981b38cd7f9338ab12ab383061861" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_param_logs</definition>
        <argsstring>(bool t_value)</argsstring>
        <name>set_param_logs</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1GLPK_1af2ba152cf0597c5a727fd8679ede40c5">set_param_logs</reimplementedby>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1a529ca155adff98d7422a8ce24d752ff1">set_param_logs</reimplementedby>
        <param>
          <type>bool</type>
          <declname>t_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="140" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a20be2e664e6a84bf404b39d768ff03e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double idol::impl::Optimizer::get_param_time_limit</definition>
        <argsstring>() const</argsstring>
        <name>get_param_time_limit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="142" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1ab21a570955c865a255914bb1627053bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_param_time_limit</definition>
        <argsstring>(double t_time_limit)</argsstring>
        <name>set_param_time_limit</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1GLPK_1a264054fd0e97f9c83eef48e430cdc8b3">set_param_time_limit</reimplementedby>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1ab9dae3fb489153a964c3b9e5c493cd44">set_param_time_limit</reimplementedby>
        <param>
          <type>double</type>
          <declname>t_time_limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="144" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a97f61564e390973a18874b8de4bd7cb5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int idol::impl::Optimizer::get_param_thread_limit</definition>
        <argsstring>() const</argsstring>
        <name>get_param_thread_limit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="146" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1acfa8aa084e883e7a191e3da770d5daa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_param_threads</definition>
        <argsstring>(unsigned int t_threads)</argsstring>
        <name>set_param_threads</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1aab93f37ed1935bb910e960f8f154a624">set_param_threads</reimplementedby>
        <param>
          <type>unsigned int</type>
          <declname>t_threads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="148" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a513ef279419e11630421378aa83ca8a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double idol::impl::Optimizer::get_param_best_obj_stop</definition>
        <argsstring>() const</argsstring>
        <name>get_param_best_obj_stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="150" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a5babaec019d640cd7828b5ef213ec335" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_param_best_obj_stop</definition>
        <argsstring>(double t_best_obj_stop)</argsstring>
        <name>set_param_best_obj_stop</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1GLPK_1ad3e1a184a67679e3dd031661b693f2b0">set_param_best_obj_stop</reimplementedby>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1a4b56aa363f7563f0ca8a56c4e53374b9">set_param_best_obj_stop</reimplementedby>
        <param>
          <type>double</type>
          <declname>t_best_obj_stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="152" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1af2cec35235bbf3a746d604fd998ad636" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double idol::impl::Optimizer::get_param_best_bound_stop</definition>
        <argsstring>() const</argsstring>
        <name>get_param_best_bound_stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="154" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1ab60bc3d2dd159d5f061b997771c91887" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_param_best_bound_stop</definition>
        <argsstring>(double t_best_bound_stop)</argsstring>
        <name>set_param_best_bound_stop</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1GLPK_1a8e12c71d452ae482bfafb4e5939b5d0f">set_param_best_bound_stop</reimplementedby>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1a06cec1a335cecefa10d91365eccfc012">set_param_best_bound_stop</reimplementedby>
        <param>
          <type>double</type>
          <declname>t_best_bound_stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="156" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1ab246bb155504651d93c91b2dc08da414" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double idol::impl::Optimizer::get_tol_mip_relative_gap</definition>
        <argsstring>() const</argsstring>
        <name>get_tol_mip_relative_gap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="158" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a566eb822d1a0707d50359b3e50fccbdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_tol_mip_relative_gap</definition>
        <argsstring>(double t_tol_mip_relative_gap)</argsstring>
        <name>set_tol_mip_relative_gap</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1a88280645ce1379a569f5c4ab9647c6cd">set_tol_mip_relative_gap</reimplementedby>
        <param>
          <type>double</type>
          <declname>t_tol_mip_relative_gap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="160" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a79a3832a54c597121788782f1d49ba8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double idol::impl::Optimizer::get_tol_mip_absolute_gap</definition>
        <argsstring>() const</argsstring>
        <name>get_tol_mip_absolute_gap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="162" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1af67921d0ce90e1d5412dff5e068bbc71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_tol_mip_absolute_gap</definition>
        <argsstring>(double t_mip_tol_absolute_gap)</argsstring>
        <name>set_tol_mip_absolute_gap</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1a4abc0ef54ea1a7e181b776b996ed0257">set_tol_mip_absolute_gap</reimplementedby>
        <param>
          <type>double</type>
          <declname>t_mip_tol_absolute_gap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="164" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a5b48ff7b9c91cdfedfaa9e18afb3bde5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double idol::impl::Optimizer::get_tol_feasibility</definition>
        <argsstring>() const</argsstring>
        <name>get_tol_feasibility</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="166" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1ad25478639b1ed1a258a7418da7ff6964" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_tol_feasibility</definition>
        <argsstring>(double t_tol_feasibility)</argsstring>
        <name>set_tol_feasibility</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1a3b03101cf613f63f222e9c6abe5402c6">set_tol_feasibility</reimplementedby>
        <param>
          <type>double</type>
          <declname>t_tol_feasibility</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="168" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a502d527b86eaa0a721e5b5bcc7dd482c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double idol::impl::Optimizer::get_tol_optimality</definition>
        <argsstring>() const</argsstring>
        <name>get_tol_optimality</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="170" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1ababdcbe906c67c4cae465962608ca93a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_tol_optimality</definition>
        <argsstring>(double t_tol_optimality)</argsstring>
        <name>set_tol_optimality</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1a1403ed7cb1cc90e9539227ae38f9e1d9">set_tol_optimality</reimplementedby>
        <param>
          <type>double</type>
          <declname>t_tol_optimality</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="172" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a317360331767cc9d4edc94cce889e5f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double idol::impl::Optimizer::get_tol_integer</definition>
        <argsstring>() const</argsstring>
        <name>get_tol_integer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="174" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1ab91250466dd2bed6c8982a0d37189da8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_tol_integer</definition>
        <argsstring>(double t_tol_integer)</argsstring>
        <name>set_tol_integer</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1aee69b69800ee55fa4d11a3a8c4ce1e19">set_tol_integer</reimplementedby>
        <param>
          <type>double</type>
          <declname>t_tol_integer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="176" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1ade78f725110a641cd46ac675769f3765" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int idol::impl::Optimizer::get_param_iteration_limit</definition>
        <argsstring>() const</argsstring>
        <name>get_param_iteration_limit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="178" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a58af4d0f6c4fabd5f571b64138610779" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void idol::impl::Optimizer::set_param_iteration_limit</definition>
        <argsstring>(unsigned int t_iteration_limit)</argsstring>
        <name>set_param_iteration_limit</name>
        <param>
          <type>unsigned int</type>
          <declname>t_iteration_limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="180" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1ae453b0716b3c142104692873a0c1fe89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool idol::impl::Optimizer::get_param_presolve</definition>
        <argsstring>() const</argsstring>
        <name>get_param_presolve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="182" column="11" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1ac673045c5d062878f2b75f3b09711f00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_param_presolve</definition>
        <argsstring>(bool t_value)</argsstring>
        <name>set_param_presolve</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1GLPK_1a68257d803dcde8606946909894eab118">set_param_presolve</reimplementedby>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1aeee8716b23e81312cb98f3592b16a686">set_param_presolve</reimplementedby>
        <param>
          <type>bool</type>
          <declname>t_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="184" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a28959c3d0a53207028a4b6238604eb56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool idol::impl::Optimizer::get_param_infeasible_or_unbounded_info</definition>
        <argsstring>() const</argsstring>
        <name>get_param_infeasible_or_unbounded_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="186" column="11" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a8e0f2f3d560b3a54a9b06645b6668215" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::impl::Optimizer::set_param_infeasible_or_unbounded_info</definition>
        <argsstring>(bool t_value)</argsstring>
        <name>set_param_infeasible_or_unbounded_info</name>
        <reimplementedby refid="classidol_1_1Optimizers_1_1Gurobi_1ad74b099bb65667a81d117cef470058e1">set_param_infeasible_or_unbounded_info</reimplementedby>
        <param>
          <type>bool</type>
          <declname>t_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="188" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a0cafae2af239bb5b7701dc8f2bc72acd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classidol_1_1Timer" kindref="compound">Timer</ref> &amp;</type>
        <definition>const Timer&amp; idol::impl::Optimizer::time</definition>
        <argsstring>() const</argsstring>
        <name>time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="190" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a1b6a136e9db30ed85a55f32c58663ed4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double idol::impl::Optimizer::get_remaining_time</definition>
        <argsstring>() const</argsstring>
        <name>get_remaining_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="192" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a237aecc646c59f56fe7e0d406912f81a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool idol::impl::Optimizer::is_terminated</definition>
        <argsstring>() const</argsstring>
        <name>is_terminated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="194" column="11" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1ad91c5c2c1bdac21e7d1db49afc37107c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; idol::impl::Optimizer::as</definition>
        <argsstring>()</argsstring>
        <name>as</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="198" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="198" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a9aa8fef64de4f65b5462442e506594d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; idol::impl::Optimizer::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="206" column="24" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="206" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1impl_1_1Optimizer_1a0455b8664cabb2579d93607446004afe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool idol::impl::Optimizer::is</definition>
        <argsstring>() const</argsstring>
        <name>is</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" line="214" column="22" bodyfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/Optimizer.h" bodystart="214" bodyend="216"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>idol::impl::Optimizer</label>
        <link refid="classidol_1_1impl_1_1Optimizer"/>
      </node>
      <node id="2">
        <label>idol::Algorithm</label>
        <link refid="classidol_1_1Algorithm"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1Optimizers_1_1BranchAndBound"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>idol::Optimizer</label>
        <link refid="classidol_1_1Optimizer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>idol::impl::Optimizer</label>
        <link refid="classidol_1_1impl_1_1Optimizer"/>
      </node>
      <node id="2">
        <label>idol::Algorithm</label>
        <link refid="classidol_1_1Algorithm"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>idol::Optimizers::BranchAndBound&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1Optimizers_1_1BranchAndBound"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>idol::Optimizer</label>
        <link refid="classidol_1_1Optimizer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" line="30" column="1" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/Optimizers_BranchAndBound.h" bodystart="30" bodyend="164"/>
    <listofallmembers>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a1fd3cc4e69e87ee91b1cc60be6e6ea0e" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>add</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a80b374ce80cb85435cdac56833ae5e26" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>add</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a873e0f526c708b2cc8168dd32ebacc14" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>add</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a86735e064591fb4f00c3499a4b51de87" prot="protected" virt="virtual" ambiguityscope="idol::Algorithm::"><scope>idol::Optimizers::BranchAndBound</scope><name>add</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a48081539ede05515c9775869ef262ae7" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>add_callback</name></member>
      <member refid="classidol_1_1Algorithm_1a3238d95678aae714ebc20e4df3a7c023" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>Algorithm</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a0d1c27be504be7243932ff591fac2eb5" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>analyze</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1ad91c5c2c1bdac21e7d1db49afc37107c" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>as</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a9aa8fef64de4f65b5462442e506594d2" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>as</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a4437a33ea5cae5e5f384a3491dea6a96" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>backtrack</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a1cd9c2c4668b797b9559e1cc7b08f238" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>BranchAndBound</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1adb2e8a91ca2e0a0058c4780228806559" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>branching_rule</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1af3c6c4331126c83ea8311c93f2a25854" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>branching_rule</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a6db70f15ec2cb0c8c984c06439277119" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>build</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a7a7e5e3b53ebd986ad121ac72f9d00cc" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>call_callbacks</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a4459c7f3f13a667acac838bf2689e561" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>create_child_nodes</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a198e066b9bfd97c55546b64a757a3b28" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>create_relaxations</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a342fde6805ee14d80fbdc55c1076877d" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>create_root_node</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1aa10759216c61f49ddc34c3870a99de30" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>detect_integer_objective</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ae8e5b133a79d74435dd1b3dc52d8f41e" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>explore</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a5838e061b34b616964424b2360217219" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>gap_is_closed</name></member>
      <member refid="classidol_1_1Algorithm_1ad65545801432ff973e15a47da2cb230e" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_absolute_gap</name></member>
      <member refid="classidol_1_1Algorithm_1a4e6c0365b139516387e991f8e798e65e" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_best_bound</name></member>
      <member refid="classidol_1_1Algorithm_1a0f622ce8c74e2207050de31504c34ada" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_best_obj</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1abeca80a9af8be162eb87afb627b6b666" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_ctr_dual</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1afb8a0013775c0dbc5179f7df11c228e0" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_ctr_farkas</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a252d0043f3260f5e1fa6e3e1c7e47082" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_n_solutions</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1af2cec35235bbf3a746d604fd998ad636" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_param_best_bound_stop</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a513ef279419e11630421378aa83ca8a3" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_param_best_obj_stop</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a28959c3d0a53207028a4b6238604eb56" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_param_infeasible_or_unbounded_info</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1ade78f725110a641cd46ac675769f3765" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_param_iteration_limit</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1acc87454b609268dc1ecf65a1ced765d2" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_param_logs</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1ae453b0716b3c142104692873a0c1fe89" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_param_presolve</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a97f61564e390973a18874b8de4bd7cb5" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_param_thread_limit</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a20be2e664e6a84bf404b39d768ff03e7" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_param_time_limit</name></member>
      <member refid="classidol_1_1Algorithm_1ae7e31752554b7d0ec5f77aed4e0bc46c" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_reason</name></member>
      <member refid="classidol_1_1Algorithm_1a424a643bf34fdc305e5e14c32c60ebde" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_relative_gap</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a1b6a136e9db30ed85a55f32c58663ed4" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_remaining_time</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ac10fe7297bb4a07e5235619feb88d520" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_solution_index</name></member>
      <member refid="classidol_1_1Algorithm_1aca1da2a76fe7439c2e5d990860ef4e0d" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_status</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a5b48ff7b9c91cdfedfaa9e18afb3bde5" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_tol_feasibility</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a317360331767cc9d4edc94cce889e5f1" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_tol_integer</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a79a3832a54c597121788782f1d49ba8c" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_tol_mip_absolute_gap</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1ab246bb155504651d93c91b2dc08da414" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_tol_mip_relative_gap</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a502d527b86eaa0a721e5b5bcc7dd482c" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_tol_optimality</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a20053f799baabfa99c162dab24198108" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_var_primal</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a292bd3bfa4745858f9b7f2b92cbebd6c" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_var_ray</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1aea3edaeb10dec423f7e2f55c6ba6097d" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>get_var_reduced_cost</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1aaab698227d1e8cabb063a0b588271ed2" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>has_incumbent</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ab5e0516fa7a86d515d196c48f62d4444" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>hook_after_optimize</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a6011ffe600f70985dbb808dda523ac73" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>hook_before_optimize</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ae9dbab65f83174e747d5589fcb7e896f" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>hook_optimize</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ac723320a8b891069ade456b86b8fbfd1" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>incumbent</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a0455b8664cabb2579d93607446004afe" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>is</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a237aecc646c59f56fe7e0d406912f81a" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>is_terminated</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a6e6fa910c383dfb1c91cb31f297de727" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>is_valid</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1adb1d735706e3da24ce2f77c0e7d909cf" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>log_after_termination</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1abc30f2d0e0c46460fa5ad797cecd631b" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>log_node_after_solve</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a17bd93cb0cf0312468100d96d25e842e" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_branching_rule</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a26d2bbd5c4df988bc8437bcdce88b8c4" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_callback</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a4964d41e3e6f4f0e4d2c39a8c5f62ca9" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_has_integer_objective</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a16168f97559cd68586993ec0965f973b" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_incumbent</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a79661af0fa1d0ec24d0b246c3a6bdad6" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_logger</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a21d81bd5126ecb32dc853121860eef74" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_n_active_nodes</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ac17c1fb1cfcb6271db4b6addbe341b74" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_n_created_nodes</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a5bc7e7073d3affa118b4f222230f713a" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_n_solved_nodes</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a8d36c9dc2a7a7501f69031760e8c9753" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_n_threads</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a40951845ca9775ed7f4fa65bf7d94722" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_node_selection_rule</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ab6692730e3450a112a1c237523dcc2e0" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_node_updators</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ab0aee0f24d91dcbe0f7c14343e272abd" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_relaxation_optimizer_factory</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a26cf8ca6348869000264077044c74bd7" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_relaxations</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a17ed475008bdf48d715ddfb6900c2bd2" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_root_node_best_bound</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1aafd0b4c15635ff9460f9edceb31348c4" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_root_node_best_obj</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a028eb8da485911e5635cbba0c883199b" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>m_steps</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a84f1675b5fe0ac866684c5995c5b64c2" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>n_active_nodes</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a8b404e43673ce816259b4252aee946c0" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>n_created_nodes</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a422467890daca36468b8ab86fdb20349" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>n_solved_nodes</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a8748ceb07cfbfb02085b70e32b86d3c5" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>name</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a23401d6f4b9166f7d941a696d4cef2e9" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>optimize</name></member>
      <member refid="classidol_1_1Optimizer_1a8793c25aaba434c6b7e9a85bcca48e16" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>Optimizer</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a6e2887215b92e97a30a74f4aa53dd2f0" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>parent</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a8ef3f923cffe9cfe01956ef0815e2e04" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>prune_nodes_by_bound</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a012177d59075e1ef6b228f8ed4eea2a0" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>relaxation</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ae073937bc0c78fb4da23187b8bb75893" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>relaxation</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ac8ff89b9c65167786d2e5aeec5d2fe52" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>remove</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a103298527511b23f601d9b3d3e011794" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>remove</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1afd79a4ae68ed85ae558b7bf3706d08dd" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>remove</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a29b91a6040358d614f50b592917baf39" prot="protected" virt="virtual" ambiguityscope="idol::Algorithm::"><scope>idol::Optimizers::BranchAndBound</scope><name>remove</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a2a6675392a782f7c1632cd7227174f6b" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>root_node_best_bound</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a886a4a18923a7140fb1bb86055daf5ed" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>root_node_best_obj</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a4aa0cbd21aa9c9dd502dff68e267b9e5" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>select_node_for_branching</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1aa890cfaf24f31f7aab7d5de062366e5b" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_as_incumbent</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1abc95e0b9763d2184a1d2b2375f0856ba" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_best_bound</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a29b5fea1ee24213bc1995546a3d8a874" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_best_obj</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1ab60bc3d2dd159d5f061b997771c91887" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_param_best_bound_stop</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a5babaec019d640cd7828b5ef213ec335" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_param_best_obj_stop</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a8e0f2f3d560b3a54a9b06645b6668215" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_param_infeasible_or_unbounded_info</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a58af4d0f6c4fabd5f571b64138610779" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_param_iteration_limit</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a990981b38cd7f9338ab12ab383061861" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_param_logs</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1ac673045c5d062878f2b75f3b09711f00" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_param_presolve</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1acfa8aa084e883e7a191e3da770d5daa4" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_param_threads</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1ab21a570955c865a255914bb1627053bb" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_param_time_limit</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1aa5d39f44ee786a92f6e4e70010ba8cc3" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_reason</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a5bd6ade2b68ec8768bae2eefdccbb3eb" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_solution_index</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a2bbe7a8e0e19e8b5b58854644abca316" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_status</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1af890c079f5525dc55300ea653cebf4a5" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_subtree_depth</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1ad25478639b1ed1a258a7418da7ff6964" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_tol_feasibility</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1ab91250466dd2bed6c8982a0d37189da8" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_tol_integer</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1af67921d0ce90e1d5412dff5e068bbc71" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_tol_mip_absolute_gap</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a566eb822d1a0707d50359b3e50fccbdf" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_tol_mip_relative_gap</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1ababdcbe906c67c4cae465962608ca93a" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>set_tol_optimality</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a2cb6d13b4ee875beeb4da1d87bf4b019" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>SetOfActiveNodes</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a3208dbf50b43af7b319121419a85f049" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>solve</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a287eafb5422cc31517e980a9c2ab4d97" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>submit_heuristic_solution</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1abaea16c748bf8107f00bd258458c5d57" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>submit_lower_bound</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a1618661b3e6c3ebe2891627dd48965ae" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>subtree_depth</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a4468720781d9278f1e2d6628a3a00e7b" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>terminate</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a0cafae2af239bb5b7701dc8f2bc72acd" prot="public" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>time</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a63ec1073fe118dfa89330fc7788936a3" prot="private" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>TreeNode</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1af9fee47df71cb4269f75256290d24a36" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a251ce2dccb97b40598b263388f6697e5" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_ctr_rhs</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1aee9f0ad78d68e9f4d17f79941a6a2150" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_ctr_type</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ac2a710630b1a4f4fface40c9152d33fa" prot="protected" virt="non-virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_lower_bound</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a19aebade58013182ee08135a59243b28" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_mat_coeff</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a8a5fed86e0a7297642704a7e399a8526" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_obj</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a5299afcf4f801f2773c54915caada951" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_obj_constant</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a9289ef61be6aadb88a821c2747fa87ee" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_obj_sense</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ae296c17ab6b0f177142ce71957fe9ae1" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_rhs</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a7b120e8fcdc53bc85daf31f4fe13f343" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_var_lb</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1afe460d5f77132e31d38dae319d545b24" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_var_obj</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1ae2d64176d0ee067f9bca4120093279e4" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_var_type</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1a504c169b5b218a2931944a2e7cdebfe9" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>update_var_ub</name></member>
      <member refid="classidol_1_1Optimizers_1_1BranchAndBound_1aa0f036cd4df87874a9856448b5f72b7c" prot="protected" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>write</name></member>
      <member refid="classidol_1_1impl_1_1Optimizer_1a87f1a4dcd75963657f0577387bfa3dea" prot="public" virt="virtual"><scope>idol::Optimizers::BranchAndBound</scope><name>~Optimizer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
