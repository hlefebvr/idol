<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classidol_1_1BranchAndBoundCallback" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>idol::BranchAndBoundCallback</compoundname>
    <derivedcompoundref refid="classidol_1_1CallbackAsBranchAndBoundCallback_1_1Strategy" prot="public" virt="non-virtual">idol::CallbackAsBranchAndBoundCallback&lt; NodeInfoT &gt;::Strategy</derivedcompoundref>
    <derivedcompoundref refid="classidol_1_1Cuts_1_1KnapsackCover_1_1Strategy" prot="public" virt="non-virtual">idol::Cuts::KnapsackCover&lt; NodeInfoT &gt;::Strategy</derivedcompoundref>
    <derivedcompoundref refid="classidol_1_1Heuristics_1_1IntegerMaster_1_1Strategy" prot="public" virt="non-virtual">idol::Heuristics::IntegerMaster&lt; NodeInfoT &gt;::Strategy</derivedcompoundref>
    <derivedcompoundref refid="classidol_1_1ReducedCostFixing_1_1Strategy" prot="public" virt="non-virtual">idol::ReducedCostFixing&lt; NodeInfoT &gt;::Strategy</derivedcompoundref>
    <derivedcompoundref refid="classidol_1_1Utils_1_1ExportBranchAndBoundTreeToCSV_1_1Strategy" prot="public" virt="non-virtual">idol::Utils::ExportBranchAndBoundTreeToCSV&lt; NodeInfoT &gt;::Strategy</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>class NodeInfoT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classidol_1_1BranchAndBoundCallback_1a9d8735c5157d74f529b4556485d06d91" prot="private" static="no" mutable="no">
        <type><ref refid="classidol_1_1BranchAndBoundCallbackI" kindref="compound">BranchAndBoundCallbackI</ref>&lt; NodeInfoT &gt; *</type>
        <definition>BranchAndBoundCallbackI&lt;NodeInfoT&gt;* idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::m_interface</definition>
        <argsstring></argsstring>
        <name>m_interface</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="212" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classidol_1_1BranchAndBoundCallback_1a9d3942e791de15a80e6ff8b5773730d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BranchAndBoundCallbackI&lt; NodeInfoT &gt;</definition>
        <argsstring></argsstring>
        <name>BranchAndBoundCallbackI&lt; NodeInfoT &gt;</name>
        <param>
          <type><ref refid="classidol_1_1BranchAndBoundCallbackI" kindref="compound">BranchAndBoundCallbackI</ref>&lt; NodeInfoT &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="214" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a0ddaa095cb312768b212ab177488a31f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::~BranchAndBoundCallback</definition>
        <argsstring>()=default</argsstring>
        <name>~BranchAndBoundCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="133" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1acfa261050e03bf300457218a38be51d6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <reimplementedby refid="classidol_1_1Cuts_1_1KnapsackCover_1_1Strategy_1ac3b637513554dd08621768a8dfd79dff">initialize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called at the very beginning of the Branch-and-Bound algorithm </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="139" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a01527d4fc8e048e4f54d3c79348e6653" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::operator()</definition>
        <argsstring>(CallbackEvent t_event)=0</argsstring>
        <name>operator()</name>
        <reimplementedby refid="classidol_1_1CallbackAsBranchAndBoundCallback_1_1Strategy_1acf7559e1cee998fafaeae01d9ca7bcff">operator()</reimplementedby>
        <reimplementedby refid="classidol_1_1Cuts_1_1KnapsackCover_1_1Strategy_1a6afecb6f46a6e8971419386f516ff60f">operator()</reimplementedby>
        <reimplementedby refid="classidol_1_1Heuristics_1_1IntegerMaster_1_1Strategy_1a7f6e5b141cccd4511946ebea8937fefc">operator()</reimplementedby>
        <reimplementedby refid="classidol_1_1ReducedCostFixing_1_1Strategy_1acad81b1be264af63671d07f5c99a69ef">operator()</reimplementedby>
        <reimplementedby refid="classidol_1_1Utils_1_1ExportBranchAndBoundTreeToCSV_1_1Strategy_1a2d2a3ffd92207ed6af18fd5361c20e85">operator()</reimplementedby>
        <param>
          <type>CallbackEvent</type>
          <declname>t_event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is left for the user to write and consists in the main execution block of the callback. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_event</parametername>
</parameternamelist>
<parameterdescription>
<para>The event triggering the callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="145" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1ad2b568d30b2ea4b47f885b3ad9119196" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::log_after_termination</definition>
        <argsstring>()</argsstring>
        <name>log_after_termination</name>
        <reimplementedby refid="classidol_1_1Cuts_1_1KnapsackCover_1_1Strategy_1a9d7eb2f9d86ef09d1566789b78659f8a">log_after_termination</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="147" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a232c9cf4520ea95bbd142fd56959ef1b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::add_user_cut</definition>
        <argsstring>(const TempCtr &amp;t_cut)</argsstring>
        <name>add_user_cut</name>
        <param>
          <type>const <ref refid="classidol_1_1TempCtr" kindref="compound">TempCtr</ref> &amp;</type>
          <declname>t_cut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a user cut to the relaxation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_cut</parametername>
</parameternamelist>
<parameterdescription>
<para>the cut to be added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="153" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a3bfb09e103d540c1bf8a1abff252cd04" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::add_lazy_cut</definition>
        <argsstring>(const TempCtr &amp;t_cut)</argsstring>
        <name>add_lazy_cut</name>
        <param>
          <type>const <ref refid="classidol_1_1TempCtr" kindref="compound">TempCtr</ref> &amp;</type>
          <declname>t_cut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a lazy cut to the relaxation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_cut</parametername>
</parameternamelist>
<parameterdescription>
<para>the cut to be added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="159" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a949f1fb81c728a38db4cf241e7fcfb01" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::add_local_variable_branching</definition>
        <argsstring>(const Var &amp;t_var, CtrType t_type, double t_rhs)</argsstring>
        <name>add_local_variable_branching</name>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <param>
          <type>CtrType</type>
          <declname>t_type</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="161" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a325b191475a118d605957ad57b9895de" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &amp;</type>
        <definition>const idol::Node&lt; NodeInfoT &gt; &amp; idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::node</definition>
        <argsstring>() const</argsstring>
        <name>node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the node which is currently explored <simplesect kind="return"><para>the node which is currently explored </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="167" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a26670d598d1dd75498199087a0bf1a5d" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
        <definition>const idol::Model &amp; idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::relaxation</definition>
        <argsstring>() const</argsstring>
        <name>relaxation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current node&apos;s model being solved <simplesect kind="return"><para>the current node&apos;s model being solved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="173" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1afce1fb1ed69b32f4450a91f05a105062" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
        <definition>const idol::Model &amp; idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::original_model</definition>
        <argsstring>() const</argsstring>
        <name>original_model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the original model from which the branch-and-bound algorithm started (i.e., the original non-relaxed model) <simplesect kind="return"><para>the original model </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="179" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a20f80c0b74e78b6bc7ee8cc8ef8c174d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::submit_heuristic_solution</definition>
        <argsstring>(NodeInfoT *t_info)</argsstring>
        <name>submit_heuristic_solution</name>
        <param>
          <type>NodeInfoT *</type>
          <declname>t_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Submits a new solution to the branch-and-bound tree algorithm.</para>
<para>The solution is checked for validity according to the branch-and-bound tree branching rule and is set as incumbent if and only if it is valid and improves the current best objective. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_info</parametername>
</parameternamelist>
<parameterdescription>
<para>a node information storing the solution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="188" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1ae81dfc23113d406f7be2e4ecba59b0e4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::submit_bound</definition>
        <argsstring>(double t_bound)</argsstring>
        <name>submit_bound</name>
        <param>
          <type>double</type>
          <declname>t_bound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Submits a new proven bound.</para>
<para>The given bound is set as best bound if and only if it improves the current best bound. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_bound</parametername>
</parameternamelist>
<parameterdescription>
<para>a proven bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="196" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a2dd664ba2acaffb86a06475b64ec1492" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structidol_1_1SideEffectRegistry" kindref="compound">SideEffectRegistry</ref> &amp;</type>
        <definition>const idol::SideEffectRegistry &amp; idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::side_effect_registry</definition>
        <argsstring>() const</argsstring>
        <name>side_effect_registry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the side effect registry <simplesect kind="return"><para>the side effect registry </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="202" column="31" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1ad08bbcb3686b854a91ad7c3f78cb4746" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classidol_1_1Timer" kindref="compound">Timer</ref> &amp;</type>
        <definition>const idol::Timer &amp; idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::time</definition>
        <argsstring>() const</argsstring>
        <name>time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="204" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a7810cef6906de798464e9bdfbcdb03c9" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::best_bound</definition>
        <argsstring>() const</argsstring>
        <name>best_bound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="206" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a04814f290af3d6c54dce2f96eba340b3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::best_obj</definition>
        <argsstring>() const</argsstring>
        <name>best_obj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="208" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1a8dc2d16f64f736ca5404970b95e3ab3d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::terminate</definition>
        <argsstring>()</argsstring>
        <name>terminate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="210" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="238" bodyend="241"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classidol_1_1BranchAndBoundCallback_1abd3c3afd2d3e8ec15c92d2ecf5c1378b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idol::BranchAndBoundCallback&lt; NodeInfoT &gt;::throw_if_no_interface</definition>
        <argsstring>() const</argsstring>
        <name>throw_if_no_interface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="214" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="298" bodyend="302"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>idol::Heuristics::IntegerMaster&lt; NodeInfoT &gt;::Strategy</label>
        <link refid="classidol_1_1Heuristics_1_1IntegerMaster_1_1Strategy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>idol::CallbackAsBranchAndBoundCallback&lt; NodeInfoT &gt;::Strategy</label>
        <link refid="classidol_1_1CallbackAsBranchAndBoundCallback_1_1Strategy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>idol::Cuts::KnapsackCover&lt; NodeInfoT &gt;::Strategy</label>
        <link refid="classidol_1_1Cuts_1_1KnapsackCover_1_1Strategy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>idol::Utils::ExportBranchAndBoundTreeToCSV&lt; NodeInfoT &gt;::Strategy</label>
        <link refid="classidol_1_1Utils_1_1ExportBranchAndBoundTreeToCSV_1_1Strategy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>idol::ReducedCostFixing&lt; NodeInfoT &gt;::Strategy</label>
        <link refid="classidol_1_1ReducedCostFixing_1_1Strategy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>idol::BranchAndBoundCallback&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1BranchAndBoundCallback"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>idol::BranchAndBoundCallback&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1BranchAndBoundCallback"/>
      </node>
    </collaborationgraph>
    <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" line="131" column="1" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/callbacks/BranchAndBoundCallback.h" bodystart="131" bodyend="217"/>
    <listofallmembers>
      <member refid="classidol_1_1BranchAndBoundCallback_1a3bfb09e103d540c1bf8a1abff252cd04" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>add_lazy_cut</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a949f1fb81c728a38db4cf241e7fcfb01" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>add_local_variable_branching</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a232c9cf4520ea95bbd142fd56959ef1b" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>add_user_cut</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a7810cef6906de798464e9bdfbcdb03c9" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>best_bound</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a04814f290af3d6c54dce2f96eba340b3" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>best_obj</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a9d3942e791de15a80e6ff8b5773730d2" prot="private" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>BranchAndBoundCallbackI&lt; NodeInfoT &gt;</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1acfa261050e03bf300457218a38be51d6" prot="protected" virt="virtual"><scope>idol::BranchAndBoundCallback</scope><name>initialize</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1ad2b568d30b2ea4b47f885b3ad9119196" prot="protected" virt="virtual"><scope>idol::BranchAndBoundCallback</scope><name>log_after_termination</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a9d8735c5157d74f529b4556485d06d91" prot="private" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>m_interface</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a325b191475a118d605957ad57b9895de" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>node</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a01527d4fc8e048e4f54d3c79348e6653" prot="protected" virt="pure-virtual"><scope>idol::BranchAndBoundCallback</scope><name>operator()</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1afce1fb1ed69b32f4450a91f05a105062" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>original_model</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a26670d598d1dd75498199087a0bf1a5d" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>relaxation</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a2dd664ba2acaffb86a06475b64ec1492" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>side_effect_registry</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1ae81dfc23113d406f7be2e4ecba59b0e4" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>submit_bound</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a20f80c0b74e78b6bc7ee8cc8ef8c174d" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>submit_heuristic_solution</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a8dc2d16f64f736ca5404970b95e3ab3d" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>terminate</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1abd3c3afd2d3e8ec15c92d2ecf5c1378b" prot="private" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>throw_if_no_interface</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1ad08bbcb3686b854a91ad7c3f78cb4746" prot="protected" virt="non-virtual"><scope>idol::BranchAndBoundCallback</scope><name>time</name></member>
      <member refid="classidol_1_1BranchAndBoundCallback_1a0ddaa095cb312768b212ab177488a31f" prot="public" virt="virtual"><scope>idol::BranchAndBoundCallback</scope><name>~BranchAndBoundCallback</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
