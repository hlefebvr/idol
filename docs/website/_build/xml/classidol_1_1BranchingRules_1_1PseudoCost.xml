<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classidol_1_1BranchingRules_1_1PseudoCost" kind="class" language="C++" prot="public">
    <compoundname>idol::BranchingRules::PseudoCost</compoundname>
    <basecompoundref refid="classidol_1_1BranchingRules_1_1VariableBranching" prot="public" virt="non-virtual">idol::BranchingRules::VariableBranching&lt; NodeInfoT &gt;</basecompoundref>
    <innerclass refid="structidol_1_1BranchingRules_1_1PseudoCost_1_1PseudoCostData" prot="private">idol::BranchingRules::PseudoCost::PseudoCostData</innerclass>
    <templateparamlist>
      <param>
        <type>class NodeInfoT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classidol_1_1BranchingRules_1_1PseudoCost_1a39feed35ba8025283c14cbb187e04d39" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classidol_1_1NodeScoreFunction" kindref="compound">NodeScoreFunction</ref> &gt;</type>
        <definition>std::unique_ptr&lt;NodeScoreFunction&gt; idol::BranchingRules::PseudoCost&lt; NodeInfoT &gt;::m_scoring_function</definition>
        <argsstring></argsstring>
        <name>m_scoring_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" line="19" column="21" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classidol_1_1BranchingRules_1_1PseudoCost_1abb679990eed6b79c0ed207a5c5cc69f8" prot="private" static="no" mutable="no">
        <type>Map&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref>, PseudoCostData &gt;</type>
        <definition>Map&lt;Var, PseudoCostData&gt; idol::BranchingRules::PseudoCost&lt; NodeInfoT &gt;::m_pseudo_cost_data</definition>
        <argsstring></argsstring>
        <name>m_pseudo_cost_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" line="30" column="9" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1PseudoCost_1ab76b3067c97b4d58744b3be601bca02b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double idol::BranchingRules::PseudoCost&lt; NodeInfoT &gt;::compute_upper_bounding_score</definition>
        <argsstring>(const Var &amp;t_var, const PseudoCostData &amp;t_data, const Node&lt; NodeInfoT &gt; &amp;t_node) const</argsstring>
        <name>compute_upper_bounding_score</name>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <param>
          <type>const PseudoCostData &amp;</type>
          <declname>t_data</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" line="32" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" bodystart="158" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1PseudoCost_1ac07fec332c516113156fe71a71f10b0b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double idol::BranchingRules::PseudoCost&lt; NodeInfoT &gt;::compute_lower_bounding_score</definition>
        <argsstring>(const Var &amp;t_var, const PseudoCostData &amp;t_data, const Node&lt; NodeInfoT &gt; &amp;t_node) const</argsstring>
        <name>compute_lower_bounding_score</name>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <param>
          <type>const PseudoCostData &amp;</type>
          <declname>t_data</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" line="34" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" bodystart="146" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1PseudoCost_1ac7c4ecf334322be197349fba9c8baa3e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double idol::BranchingRules::PseudoCost&lt; NodeInfoT &gt;::compute_average_lower_bounding_score</definition>
        <argsstring>(const Node&lt; NodeInfoT &gt; &amp;t_node) const</argsstring>
        <name>compute_average_lower_bounding_score</name>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" line="36" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" bodystart="194" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1PseudoCost_1a17fa681a540b8ac75f7c7e29eec0d8a9" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double idol::BranchingRules::PseudoCost&lt; NodeInfoT &gt;::compute_average_upper_bounding_score</definition>
        <argsstring>(const Node&lt; NodeInfoT &gt; &amp;t_node) const</argsstring>
        <name>compute_average_upper_bounding_score</name>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" line="38" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" bodystart="170" bodyend="191"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1PseudoCost_1abb62085eb6204a233465813b60caa7c3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>idol::BranchingRules::PseudoCost&lt; NodeInfoT &gt;::PseudoCost</definition>
        <argsstring>(const Optimizers::BranchAndBound&lt; NodeInfoT &gt; &amp;t_parent, std::list&lt; Var &gt; t_branching_candidates)</argsstring>
        <name>PseudoCost</name>
        <param>
          <type>const <ref refid="classidol_1_1Optimizers_1_1BranchAndBound" kindref="compound">Optimizers::BranchAndBound</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_parent</declname>
        </param>
        <param>
          <type>std::list&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_branching_candidates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" line="40" column="14" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1PseudoCost_1a01c3c027577c0aaa5ae046e4791aa0fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::list&lt; std::pair&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref>, double &gt; &gt;</type>
        <definition>std::list&lt; std::pair&lt; idol::Var, double &gt; &gt; idol::BranchingRules::PseudoCost&lt; NodeInfoT &gt;::scoring_function</definition>
        <argsstring>(const std::list&lt; Var &gt; &amp;t_var, const Node&lt; NodeInfoT &gt; &amp;t_node) override</argsstring>
        <name>scoring_function</name>
        <reimplements refid="classidol_1_1BranchingRules_1_1VariableBranching_1acd19c8fd7ed1c040a9d6a51ed03e507d">scoring_function</reimplements>
        <param>
          <type>const std::list&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>t_var</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" line="42" column="15" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" bodystart="120" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1PseudoCost_1ac830d84deff8861dae4f39b59e28d9b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void idol::BranchingRules::PseudoCost&lt; NodeInfoT &gt;::on_node_solved</definition>
        <argsstring>(const Node&lt; NodeInfoT &gt; &amp;t_node) override</argsstring>
        <name>on_node_solved</name>
        <reimplements refid="classidol_1_1BranchingRule_1a4eec0ec4b22285b87537bf67bc61a334">on_node_solved</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" line="44" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" bodystart="62" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1VariableBranching_1a2e890a33b99eca0157875d1c4969529b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool idol::BranchingRules::VariableBranching&lt; NodeInfoT &gt;::is_valid</definition>
        <argsstring>(const Node&lt; NodeInfoT &gt; &amp;t_node)</argsstring>
        <name>is_valid</name>
        <reimplements refid="classidol_1_1BranchingRule_1a68472058e98da75100d469e4d82d7749">is_valid</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" line="23" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" bodystart="23" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1VariableBranching_1a57223b38da5e325ac5dadba4cd56a8c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::list&lt; NodeInfoT * &gt;</type>
        <definition>virtual std::list&lt;NodeInfoT *&gt; idol::BranchingRules::VariableBranching&lt; NodeInfoT &gt;::create_child_nodes_for_selected_variable</definition>
        <argsstring>(const Node&lt; NodeInfoT &gt; &amp;t_node, const Var &amp;t_var)</argsstring>
        <name>create_child_nodes_for_selected_variable</name>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_node</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" line="38" column="23" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" bodystart="38" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1VariableBranching_1a270b6b56069372afcfdf4aec3654d6ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::list&lt; NodeInfoT * &gt;</type>
        <definition>virtual std::list&lt;NodeInfoT *&gt; idol::BranchingRules::VariableBranching&lt; NodeInfoT &gt;::create_child_nodes</definition>
        <argsstring>(const Node&lt; NodeInfoT &gt; &amp;t_node)</argsstring>
        <name>create_child_nodes</name>
        <reimplements refid="classidol_1_1BranchingRule_1a23524fb00b5f3aaa81e8ddcd999099aa">create_child_nodes</reimplements>
        <param>
          <type>const <ref refid="classidol_1_1Node" kindref="compound">Node</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" line="54" column="23" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" bodystart="54" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1VariableBranching_1a90f844a29cde9f698bc776aece29a9db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::list&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
        <definition>const std::list&lt;Var&gt;&amp; idol::BranchingRules::VariableBranching&lt; NodeInfoT &gt;::branching_candidates</definition>
        <argsstring>() const</argsstring>
        <name>branching_candidates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" line="74" column="22" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRule_1ac6f41d5f531eda67903c7418183eb13f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classidol_1_1Optimizers_1_1BranchAndBound" kindref="compound">Optimizers::BranchAndBound</ref>&lt; NodeInfoT &gt; &amp;</type>
        <definition>const Optimizers::BranchAndBound&lt;NodeInfoT&gt;&amp; idol::BranchingRule&lt; NodeInfoT &gt;::parent</definition>
        <argsstring>() const</argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" line="33" column="39" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRule_1a00afc9c9a3ba71fe695a9d0166d1f646" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
        <definition>const Model&amp; idol::BranchingRule&lt; NodeInfoT &gt;::model</definition>
        <argsstring>() const</argsstring>
        <name>model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" line="35" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRule_1af61d96c5141b23fff41a926ef027659f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::BranchingRule&lt; NodeInfoT &gt;::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <reimplementedby refid="classidol_1_1BranchingRules_1_1BranchingWithPriority_1a2d72a88d7b643093665999db8fa38de2">initialize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" line="37" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRule_1aed2eb5bab62b3f790b1963239fae1c39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void idol::BranchingRule&lt; NodeInfoT &gt;::on_nodes_have_been_created</definition>
        <argsstring>()</argsstring>
        <name>on_nodes_have_been_created</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" line="45" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRule_1afe4bfbe68ea6d8d0c696be57b8c67f92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; idol::BranchingRule&lt; NodeInfoT &gt;::as</definition>
        <argsstring>()</argsstring>
        <name>as</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" line="47" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" bodystart="47" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRule_1ac9c981d04e9f6ebfb87964bf162219b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; idol::BranchingRule&lt; NodeInfoT &gt;::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" line="55" column="24" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" bodystart="55" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRule_1a6e0f16589b0a0d2a1e0b5274d38f6575" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool idol::BranchingRule&lt; NodeInfoT &gt;::is</definition>
        <argsstring>() const</argsstring>
        <name>is</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" line="63" column="22" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" bodystart="63" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1VariableBranching_1a061c08cd4af4f23514e03b45ca8f86ff" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::list&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>std::list&lt;Var&gt; idol::BranchingRules::VariableBranching&lt; NodeInfoT &gt;::get_invalid_variables</definition>
        <argsstring>(const PrimalPoint &amp;t_primal_solution)</argsstring>
        <name>get_invalid_variables</name>
        <param>
          <type>const <ref refid="classidol_1_1Point" kindref="compound">PrimalPoint</ref> &amp;</type>
          <declname>t_primal_solution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" line="83" column="15" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" bodystart="83" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRules_1_1VariableBranching_1a33906c31783494943099498b1a6716ec" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
        <definition>Var idol::BranchingRules::VariableBranching&lt; NodeInfoT &gt;::get_argmax_score</definition>
        <argsstring>(const std::list&lt; std::pair&lt; Var, double &gt;&gt; &amp;t_scores)</argsstring>
        <name>get_argmax_score</name>
        <param>
          <type>const std::list&lt; std::pair&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref>, double &gt;&gt; &amp;</type>
          <declname>t_scores</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" line="96" column="9" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/VariableBranching.h" bodystart="96" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRule_1afb51c5d41cf0cfe92645ccf3f79cf4fe" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string idol::BranchingRule&lt; NodeInfoT &gt;::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" line="28" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/BranchingRule.h" bodystart="28" bodyend="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>idol::BranchingRules::VariableBranching&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1BranchingRules_1_1VariableBranching"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>idol::BranchingRules::PseudoCost&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1BranchingRules_1_1PseudoCost"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>idol::BranchingRule&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1BranchingRule"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>idol::BranchingRules::VariableBranching&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1BranchingRules_1_1VariableBranching"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>idol::BranchingRules::PseudoCost&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1BranchingRules_1_1PseudoCost"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>idol::BranchingRule&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1BranchingRule"/>
      </node>
    </collaborationgraph>
    <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" line="17" column="1" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/impls/PseudoCost.h" bodystart="17" bodyend="46"/>
    <listofallmembers>
      <member refid="classidol_1_1BranchingRule_1afe4bfbe68ea6d8d0c696be57b8c67f92" prot="public" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>as</name></member>
      <member refid="classidol_1_1BranchingRule_1ac9c981d04e9f6ebfb87964bf162219b7" prot="public" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>as</name></member>
      <member refid="classidol_1_1BranchingRules_1_1VariableBranching_1a90f844a29cde9f698bc776aece29a9db" prot="public" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>branching_candidates</name></member>
      <member refid="classidol_1_1BranchingRule_1a7fcc7e1d025f2350ce3922bd82672d61" prot="public" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>BranchingRule</name></member>
      <member refid="classidol_1_1BranchingRules_1_1PseudoCost_1ac7c4ecf334322be197349fba9c8baa3e" prot="private" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>compute_average_lower_bounding_score</name></member>
      <member refid="classidol_1_1BranchingRules_1_1PseudoCost_1a17fa681a540b8ac75f7c7e29eec0d8a9" prot="private" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>compute_average_upper_bounding_score</name></member>
      <member refid="classidol_1_1BranchingRules_1_1PseudoCost_1ac07fec332c516113156fe71a71f10b0b" prot="private" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>compute_lower_bounding_score</name></member>
      <member refid="classidol_1_1BranchingRules_1_1PseudoCost_1ab76b3067c97b4d58744b3be601bca02b" prot="private" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>compute_upper_bounding_score</name></member>
      <member refid="classidol_1_1BranchingRules_1_1VariableBranching_1a270b6b56069372afcfdf4aec3654d6ec" prot="public" virt="virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>create_child_nodes</name></member>
      <member refid="classidol_1_1BranchingRules_1_1VariableBranching_1a57223b38da5e325ac5dadba4cd56a8c8" prot="public" virt="virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>create_child_nodes_for_selected_variable</name></member>
      <member refid="classidol_1_1BranchingRules_1_1VariableBranching_1a33906c31783494943099498b1a6716ec" prot="protected" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>get_argmax_score</name></member>
      <member refid="classidol_1_1BranchingRules_1_1VariableBranching_1a061c08cd4af4f23514e03b45ca8f86ff" prot="protected" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>get_invalid_variables</name></member>
      <member refid="classidol_1_1BranchingRule_1af61d96c5141b23fff41a926ef027659f" prot="public" virt="virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>initialize</name></member>
      <member refid="classidol_1_1BranchingRule_1a6e0f16589b0a0d2a1e0b5274d38f6575" prot="public" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>is</name></member>
      <member refid="classidol_1_1BranchingRules_1_1VariableBranching_1a2e890a33b99eca0157875d1c4969529b" prot="public" virt="virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>is_valid</name></member>
      <member refid="classidol_1_1BranchingRules_1_1PseudoCost_1abb679990eed6b79c0ed207a5c5cc69f8" prot="private" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>m_pseudo_cost_data</name></member>
      <member refid="classidol_1_1BranchingRules_1_1PseudoCost_1a39feed35ba8025283c14cbb187e04d39" prot="private" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>m_scoring_function</name></member>
      <member refid="classidol_1_1BranchingRule_1a00afc9c9a3ba71fe695a9d0166d1f646" prot="public" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>model</name></member>
      <member refid="classidol_1_1BranchingRule_1afb51c5d41cf0cfe92645ccf3f79cf4fe" prot="protected" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>name</name></member>
      <member refid="classidol_1_1BranchingRules_1_1PseudoCost_1ac830d84deff8861dae4f39b59e28d9b2" prot="public" virt="virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>on_node_solved</name></member>
      <member refid="classidol_1_1BranchingRule_1aed2eb5bab62b3f790b1963239fae1c39" prot="public" virt="virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>on_nodes_have_been_created</name></member>
      <member refid="classidol_1_1BranchingRule_1ac6f41d5f531eda67903c7418183eb13f" prot="public" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>parent</name></member>
      <member refid="classidol_1_1BranchingRules_1_1PseudoCost_1abb62085eb6204a233465813b60caa7c3" prot="public" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>PseudoCost</name></member>
      <member refid="classidol_1_1BranchingRules_1_1PseudoCost_1a01c3c027577c0aaa5ae046e4791aa0fe" prot="public" virt="virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>scoring_function</name></member>
      <member refid="classidol_1_1BranchingRules_1_1VariableBranching_1a9dc87ca6c0e67ba04bf81b9ae75209da" prot="public" virt="non-virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>VariableBranching</name></member>
      <member refid="classidol_1_1BranchingRule_1a531cea6dcb779fdf9ece8449ad3d88c1" prot="public" virt="virtual"><scope>idol::BranchingRules::PseudoCost</scope><name>~BranchingRule</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
