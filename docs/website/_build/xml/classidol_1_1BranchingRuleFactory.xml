<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classidol_1_1BranchingRuleFactory" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>idol::BranchingRuleFactory</compoundname>
    <derivedcompoundref refid="classidol_1_1VariableBranching_1_1Strategy" prot="public" virt="non-virtual">idol::VariableBranching::Strategy&lt; NodeInfoT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classidol_1_1VariableBranching_1_1Strategy" prot="public" virt="non-virtual">idol::VariableBranching::Strategy&lt; NodeT &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>class NodeT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classidol_1_1BranchingRuleFactory_1a0b5dda2debdc1c4f6729f90449b3377f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual idol::BranchingRuleFactory&lt; NodeT &gt;::~BranchingRuleFactory</definition>
        <argsstring>()=default</argsstring>
        <name>~BranchingRuleFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/BranchingRuleFactory.h" line="23" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRuleFactory_1a769332fb039e7db9bb7f7aa2a4178848" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classidol_1_1BranchingRule" kindref="compound">BranchingRule</ref>&lt; NodeT &gt; *</type>
        <definition>virtual BranchingRule&lt;NodeT&gt;* idol::BranchingRuleFactory&lt; NodeT &gt;::operator()</definition>
        <argsstring>(const Optimizers::BranchAndBound&lt; NodeT &gt; &amp;t_parent) const =0</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classidol_1_1Optimizers_1_1BranchAndBound" kindref="compound">Optimizers::BranchAndBound</ref>&lt; NodeT &gt; &amp;</type>
          <declname>t_parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/BranchingRuleFactory.h" line="25" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1BranchingRuleFactory_1a4b88a3128af210b4c6ce21886662fede" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classidol_1_1BranchingRuleFactory" kindref="compound">BranchingRuleFactory</ref> *</type>
        <definition>virtual BranchingRuleFactory* idol::BranchingRuleFactory&lt; NodeT &gt;::clone</definition>
        <argsstring>() const =0</argsstring>
        <name>clone</name>
        <reimplementedby refid="classidol_1_1BranchingWithPriority_1ac142827067ebe4ee6a808c0cc69a5699">clone</reimplementedby>
        <reimplementedby refid="classidol_1_1Diver_1_1Strategy_1a018841815054a6b13187456a14257d5c">clone</reimplementedby>
        <reimplementedby refid="classidol_1_1FirstInfeasibleFound_1_1Strategy_1abe42438ee5afb8e979e6db741396a50d">clone</reimplementedby>
        <reimplementedby refid="classidol_1_1LeastInfeasible_1_1Strategy_1a1fece2524b0640f0a871c2e62d532875">clone</reimplementedby>
        <reimplementedby refid="classidol_1_1MostInfeasible_1_1Strategy_1a905d23a5d0f09d4c58cb022a0502b3bf">clone</reimplementedby>
        <reimplementedby refid="classidol_1_1PseudoCost_1_1Strategy_1a9d459b4e05581fac398e6b21cda1fb87">clone</reimplementedby>
        <reimplementedby refid="classidol_1_1StrongBranching_1_1Strategy_1a22da68483177fd5fd78c7132ade8bab8">clone</reimplementedby>
        <reimplementedby refid="classidol_1_1UniformlyRandom_1_1Strategy_1aec5dcc1a052828b72bbe850759b915ac">clone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/BranchingRuleFactory.h" line="27" column="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>idol::FirstInfeasibleFound::Strategy&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1FirstInfeasibleFound_1_1Strategy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>idol::PseudoCost::Strategy&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1PseudoCost_1_1Strategy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>idol::BranchingRuleFactory&lt; idol::DefaultNodeInfo &gt;</label>
        <link refid="classidol_1_1BranchingRuleFactory"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; idol::DefaultNodeInfo &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>idol::MostInfeasible::Strategy&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1MostInfeasible_1_1Strategy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>idol::VariableBranching::Strategy&lt; NodeT &gt;</label>
        <link refid="classidol_1_1VariableBranching_1_1Strategy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>idol::BranchingRuleFactory&lt; NodeT &gt;</label>
        <link refid="classidol_1_1BranchingRuleFactory"/>
      </node>
      <node id="2">
        <label>idol::VariableBranching::Strategy&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1VariableBranching_1_1Strategy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; NodeInfoT &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>idol::LeastInfeasible::Strategy&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1LeastInfeasible_1_1Strategy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>idol::StrongBranching::Strategy&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1StrongBranching_1_1Strategy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>idol::UniformlyRandom::Strategy&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1UniformlyRandom_1_1Strategy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>idol::BranchingWithPriority&lt; NodeT &gt;</label>
        <link refid="classidol_1_1BranchingWithPriority"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>idol::Diver&lt; BranchingRuleT &gt;::Strategy&lt; NodeInfoT &gt;</label>
        <link refid="classidol_1_1Diver_1_1Strategy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>idol::BranchingRuleFactory&lt; NodeT &gt;</label>
        <link refid="classidol_1_1BranchingRuleFactory"/>
      </node>
    </collaborationgraph>
    <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/BranchingRuleFactory.h" line="21" column="1" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/BranchingRuleFactory.h" bodystart="21" bodyend="28"/>
    <listofallmembers>
      <member refid="classidol_1_1BranchingRuleFactory_1a4b88a3128af210b4c6ce21886662fede" prot="public" virt="pure-virtual"><scope>idol::BranchingRuleFactory</scope><name>clone</name></member>
      <member refid="classidol_1_1BranchingRuleFactory_1a769332fb039e7db9bb7f7aa2a4178848" prot="public" virt="pure-virtual"><scope>idol::BranchingRuleFactory</scope><name>operator()</name></member>
      <member refid="classidol_1_1BranchingRuleFactory_1a0b5dda2debdc1c4f6729f90449b3377f" prot="public" virt="virtual"><scope>idol::BranchingRuleFactory</scope><name>~BranchingRuleFactory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
