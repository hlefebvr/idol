Mixed-integer Optimization
==========================

Modeling a MIP with 
-------------------

Introduction
~~~~~~~~~~~~

In idol, a mixed-integer optimization problem (MIP) is assumed to be of
the form:

.. math::

   \begin{aligned}
           \min_x \quad & c^\top x + x^\top D x + c_0 \\
           \text{s.t.} \quad 
           & a_{i\cdot}^\top x + x^\top Q^i x \le b_i, \quad \text{for all } i=1,\dotsc,m, \\
           & \ell_j \le x_j \le u_j, \quad \text{for all } j = 1,\dotsc,n, \\
           & x_j\in \mathbb{Z}, \quad \text{for all } j\in J \subseteq\{1,\dotsc,n\}.
       \end{aligned}

[eq:mip]

Here, :math:`x` is the decision-variable vector while vectors and
matrices :math:`c\in\mathbb{Q}^n`, :math:`D\in\mathbb{Q}^{n\times n}`,
:math:`A\in\mathbb{Q}^{m\times
n}`, :math:`Q^i\in\mathbb{Q}^i` (:math:`i=1,\dotsc,m`),
:math:`b\in\mathbb{Q}^m`, :math:`\ell\in\mathbb{Q}^n\cup\{-\infty\}` and
:math:`u\in\mathbb{Q}^n\cup\{\infty\}` are input data. As usual,
variables are classified depending on their type (continuous, integer or
binary) and bounds; see Table `1.1 <#tab:var-types>`__. A constraint in
which :math:`Q^i
= 0` is called a linear constraint, otherwise, it is a quadratic
constraint.

.. container::
   :name: tab:var-types

   .. table:: Terminology for variables in a MIP

      +----------------------+----------------------+----------------------+
      | A variable           | if its index         | and its bounds       |
      | :math:`x_j` is said  | :math:`j` satisfies  | satisfy ...          |
      | ...                  | ...                  |                      |
      +======================+======================+======================+
      | integer              | :math:`j\in J`       | —                    |
      +----------------------+----------------------+----------------------+
      | binary               | :math:`j\in J`       | :math:`0 \           |
      |                      |                      | le \ell \le u \le 1` |
      +----------------------+----------------------+----------------------+
      | continuous           | :math:`j\notin J`    | —                    |
      +----------------------+----------------------+----------------------+
      | free                 | —                    | :math:`l=-\infty`    |
      |                      |                      | and                  |
      |                      |                      | :math:`u = \infty`   |
      +----------------------+----------------------+----------------------+
      | non-negative         | —                    | :math:`\ell \ge 0`   |
      +----------------------+----------------------+----------------------+
      | non-positive         | —                    | :math:`u \le 0`      |
      +----------------------+----------------------+----------------------+
      | bounded              | —                    | :math:`-\infty <     |
      |                      |                      | \ell \le u < \infty` |
      +----------------------+----------------------+----------------------+
      | fixed                | —                    | :math:`\ell = u`     |
      +----------------------+----------------------+----------------------+

An important class of problems is when all constraints are linear and
the objective function is linear, i.e., :math:`Q^i=0` for all
:math:`i=1,\dotsc,m` and :math:`D=0`. In this case, we say
that `[eq:mip] <#eq:mip>`__ is a mixed-integer linear problem (MILP).

Solving problems with Optimizers
--------------------------------

Callbacks
---------

Writing a custom Branch-and-Bound algorithm
-------------------------------------------

Column Generation and Branch-and-Price
--------------------------------------

Penalty alternating direction method
------------------------------------

Bilevel Optimization
====================

Modeling a bilevel problem
--------------------------

Problems with continuous follower
---------------------------------

.. math::

   \begin{aligned}
           \min_{x,y} \quad & c^\top x + d^\top y \\
           \text{s.t.} \quad & Ax + By \ge a, \\
           & y\in S(x).
       \end{aligned}

The strong-duality single-level reformulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The KKT single-level reformulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Linearization techniques for the KKT single-level reformulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. math::

   \begin{aligned}
           \min_y \quad & f^\top y \\
           \text{s.t.} \quad & C^=x + D^=y = b^=, & (\lambda^=\in\mathbb{R}^{m_=}) \\
           & C^\le x + D^\le y \le b^\le, & (\lambda^\le\in\mathbb{R}^{m_\le}_{\le 0}) \\
           & C^\ge x + D^\ge y \ge b^\ge, & (\lambda^\ge\in\mathbb{R}^{m_\ge}_{\ge 0}) \\
           & y \le y^\le, & (\pi^\le\in\mathbb{R}^{n}_{\le 0}) \\
           & y \ge y^\ge & (\pi^\ge\in\mathbb{R}^{n}_{\ge 0})&.
       \end{aligned}

.. math::

   \begin{aligned}
           \max_{ \lambda^=, \lambda^\ge, \lambda^\le, \pi^\le, \pi^\ge } \quad & 
           (b^= - C^=x)^\top\lambda^=
           + (b^\le - C^\le x)^\top\lambda^\le
           + (b^\ge - C^\ge x)^\top\lambda^\ge \\
           & \quad 
           +\sum_{j:y^\le_j < \infty} (y^\le)^\top\pi^\le
           +\sum_{j:y^\ge_j > -\infty} (y^\ge)^\top\pi^\ge \\
           \text{s.t.} \quad & (D^=)^\top\lambda^= + (D^\le)^\top\lambda^\le + (D^\ge)^\top\lambda^\ge + \pi^\le + \pi^\ge = d, \\
           & \lambda^\le \le 0, \lambda^\ge \ge 0, \pi^\le \le 0, \pi^\ge \ge 0.
       \end{aligned}

The KKT system reads

.. math::

   \begin{aligned}
       \text{Primal feasibility} \quad & 
       \begin{cases}
           C^=x + D^=y = b^=, \\
           C^\le x + D^\le y \le b^\le, \\
           C^\ge x + D^\ge y \ge b^\ge, \\
           y \le y^\le, \\
           y \ge y^\ge,
       \end{cases} \\
       \text{Dual feasibility} \quad & 
       \begin{cases}
           \lambda^\le \le 0, \\
           \lambda^\ge \ge 0, \\
           \pi^\le \le 0, \\
           \pi^\ge \ge 0, 
       \end{cases} \\
       \text{Stationarity} \quad &
       \begin{cases}
           (D^=)^\top\lambda^= + (D^\le)^\top\lambda^\le + (D^\ge)^\top\lambda^\ge + \pi^\le + \pi^\ge = d,
       \end{cases} \\
       \text{Complementarity} \quad & 
       \begin{cases}
           (C^\le x + D^\le - b^\le)^\top \lambda^\le = 0, \\
           (C^\ge x + D^\ge - b^\ge)^\top \lambda^\ge = 0, \\
           (y - y^\le)^\top \pi^\le = 0, \\
           (y - y^\ge)^\top \pi^\ge = 0.
       \end{cases}\end{aligned}

Using SOS1 constraints
^^^^^^^^^^^^^^^^^^^^^^

.. math::

   \begin{aligned}
       & (C^\le x + D^\le - b^\le) = s^\le, \\
       & (C^\ge x + D^\ge - b^\ge) = s^\ge, \\
       & (y - y^\le) = r^\le, \\
       & (y - y^\ge) = r^\ge, \\
       & \mathrm{SOS1}(s_i^\le, \lambda^\le_i), \quad \text{for all } i=1,\dotsc,m_\le, \\
       & \mathrm{SOS1}(s_i^\ge, \lambda^\ge_i), \quad \text{for all } i=1,\dotsc,m_\ge, \\
       & \mathrm{SOS1}(r_i^\le, \pi^\le_i), \quad \text{for all } i=1,\dotsc,n, \\
       & \mathrm{SOS1}(r_i^\ge, \pi^\ge_i), \quad \text{for all } i=1,\dotsc,n. \end{aligned}

Using the big-M approach
^^^^^^^^^^^^^^^^^^^^^^^^

.. math::

   \begin{aligned}
       & M_i^\le u^\le_i \le \lambda^\le \le 0, 
       \quad N_i^\le(1 - u_i^\le) \le C^\le x + D^\le y - b^\le \le 0,  \quad \text{for all } i=1,\dotsc,m_\le,\\
       & M_i^\ge u^\ge_i \ge \lambda^\ge \ge 0, 
       \quad N_i^\ge(1 - u_i^\ge) \ge C^\ge x + D^\ge y - b^\ge \ge 0,  \quad \text{for all } i=1,\dotsc,m_\ge,\\
       & O_j^\le v_j^\le \le \pi^\le \le 0, 
       \quad P_i^\le(1 - v_j^\le) \le y - y^\le \le 0, \quad \text{for all }j=1,\dotsc,n, \\
       & O_j^\ge v_j^\ge \ge \pi^\ge \ge 0, 
       \quad P_i^\le(1 - v_j^\le) \ge y - y^\ge \ge 0, \quad \text{for all }j=1,\dotsc,n, \\
       & u^\le\in\{0,1\}^{m_\le}, \quad u^\ge\in\{0,1\}^{m_\ge}, \quad 
       v^\le\in\{0,1\}^{n}, \quad v^\ge\in\{0,1\}^{n}.\end{aligned}

.. table:: Function calls made to the BoundProvider to linearize a KKT
single-level reformulation with the big-M approach.

   +----------------+-------------------------+-------------------------+
   | CtrType        |                         |                         |
   +================+=========================+=========================+
   | LessOrEqual    | :math:`M_i^\le \gets`   | :math:`N_i^\le \gets`   |
   |                | get_ctr_dual_lb(c)      | get_ctr_slack_lb(c)     |
   +----------------+-------------------------+-------------------------+
   | GreaterOrEqual | :math:`M_i^\ge \gets`   | :math:`N_i^\ge \gets`   |
   |                | get_ctr_dual_ub(c)      | get_ctr_slack_ub(c)     |
   +----------------+-------------------------+-------------------------+

.. table:: Function calls made to the BoundProvider to linearize a KKT
single-level reformulation with the big-M approach.

   +----------------------------------+----------------------------------+
   | :math:`O_j^\le\gets`             | :m                               |
   | get_var_ub_dual_lb(y)            | ath:`P_j^\le\gets y^\ge - y^\le` |
   +----------------------------------+----------------------------------+
   | :math:`O_j^\ge\gets`             | :ma                              |
   | get_var_lb_dual_ub(y)            | th:`P_j^\ge\gets  y^\le - y^\ge` |
   +----------------------------------+----------------------------------+

Penalty alternating direction methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problems with mixed-integer follower
------------------------------------

Pessimistic bilevel optimization
--------------------------------

Robust Optimization
===================

Modeling a robust problem
-------------------------

Deterministic reformulations
----------------------------

Affine decision rules
---------------------

Column and constraint generation
--------------------------------
