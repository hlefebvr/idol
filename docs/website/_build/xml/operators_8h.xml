<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="operators_8h" kind="file" language="C++">
    <compoundname>operators.h</compoundname>
    <includes refid="operators__utils_8h" local="yes">operators_utils.h</includes>
    <includes refid="Point_8h" local="yes">idol/general/utils/Point.h</includes>
    <includes refid="QuadExpr_8h" local="no">idol/mixed-integer/modeling/expressions/QuadExpr.h</includes>
    <includes refid="Var_8h" local="no">idol/mixed-integer/modeling/variables/Var.h</includes>
    <includes refid="Ctr_8h" local="no">idol/mixed-integer/modeling/constraints/Ctr.h</includes>
    <includedby refid="GenerationPattern_8h" local="yes">/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h</includedby>
    <includedby refid="modeling_8h" local="yes">/home/henri/Research/idol/lib/include/idol/modeling.h</includedby>
    <incdepgraph>
      <node id="18">
        <label>list</label>
      </node>
      <node id="1">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>functional</label>
      </node>
      <node id="11">
        <label>iomanip</label>
      </node>
      <node id="9">
        <label>limits</label>
      </node>
      <node id="36">
        <label>LinExpr.h</label>
        <link refid="LinExpr_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>idol/general/utils/Point.h</label>
        <link refid="Point_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>idol/general/utils/Pair.h</label>
        <link refid="Pair_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cmath</label>
      </node>
      <node id="31">
        <label>stdexcept</label>
      </node>
      <node id="12">
        <label>numeric</label>
      </node>
      <node id="19">
        <label>string</label>
      </node>
      <node id="25">
        <label>impl_Annotation.h</label>
        <link refid="impl__Annotation_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>map</label>
      </node>
      <node id="8">
        <label>idol/general/numericals.h</label>
        <link refid="numericals_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>AffExpr.h</label>
        <link refid="AffExpr_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>ostream</label>
      </node>
      <node id="34">
        <label>idol/mixed-integer/modeling/expressions/QuadExpr.h</label>
        <link refid="QuadExpr_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>any</label>
      </node>
      <node id="15">
        <label>idol/mixed-integer/modeling/objects/Object.h</label>
        <link refid="Object_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>optional</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="40">
        <label>idol/mixed-integer/modeling/constraints/TempCtr.h</label>
        <link refid="TempCtr_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>utility</label>
      </node>
      <node id="21">
        <label>array</label>
      </node>
      <node id="4">
        <label>SparseVector.h</label>
        <link refid="SparseVector_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>idol/general/utils/IteratorForward.h</label>
        <link refid="IteratorForward_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>idol/mixed-integer/modeling/Types.h</label>
        <link refid="Types_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>idol/mixed-integer/modeling/annotations/Annotation.h</label>
        <link refid="Annotation_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="39">
        <label>idol/mixed-integer/modeling/constraints/Ctr.h</label>
        <link refid="Ctr_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>unordered_map</label>
      </node>
      <node id="6">
        <label>idol/general/utils/exceptions/Exception.h</label>
        <link refid="Exception_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>idol/general/utils/Vector.h</label>
        <link refid="Vector_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ObjectId.h</label>
        <link refid="ObjectId_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>idol/mixed-integer/modeling/variables/Var.h</label>
        <link refid="Var_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>operators_utils.h</label>
        <link refid="operators__utils_8h_source"/>
      </node>
      <node id="16">
        <label>memory</label>
      </node>
      <node id="30">
        <label>types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>idol/general/utils/Map.h</label>
        <link refid="Map_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="9">
        <label>/home/henri/Research/idol/lib/include/idol/solvers.h</label>
        <link refid="solvers_8h_source"/>
      </node>
      <node id="1">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/dantzig-wolfe/Optimizers_DantzigWolfeDecomposition.h</label>
        <link refid="Optimizers__DantzigWolfeDecomposition_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/callbacks/cutting-planes/CutSeparation.h</label>
        <link refid="CutSeparation_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/padm/PenaltyMethod.h</label>
        <link refid="PenaltyMethod_8h_source"/>
      </node>
      <node id="5">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/callbacks/cutting-planes/LazyCutCallback.h</label>
        <link refid="LazyCutCallback_8h_source"/>
      </node>
      <node id="11">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/callbacks/heuristics/IntegerMaster.h</label>
        <link refid="IntegerMaster_8h_source"/>
      </node>
      <node id="7">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/dantzig-wolfe/Formulation.h</label>
        <link refid="mixed-integer_2optimizers_2dantzig-wolfe_2Formulation_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/callbacks/cutting-planes/UserCutCallback.h</label>
        <link refid="UserCutCallback_8h_source"/>
      </node>
      <node id="13">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/dantzig-wolfe/infeasibility-strategies/ArtificialCosts.h</label>
        <link refid="ArtificialCosts_8h_source"/>
      </node>
      <node id="18">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/padm/PenaltyUpdates.h</label>
        <link refid="PenaltyUpdates_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/henri/Research/idol/lib/include/idol/bilevel/optimizers/BranchAndCut/Optimizers_BranchAndCut.h</label>
        <link refid="Optimizers__BranchAndCut_8h_source"/>
      </node>
      <node id="8">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/dantzig-wolfe/DantzigWolfeDecomposition.h</label>
        <link refid="DantzigWolfeDecomposition_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/padm/Formulation.h</label>
        <link refid="mixed-integer_2optimizers_2padm_2Formulation_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/padm/PADM.h</label>
        <link refid="PADM_8h_source"/>
      </node>
      <node id="19">
        <label>/home/henri/Research/idol/lib/include/idol/modeling.h</label>
        <link refid="modeling_8h_source"/>
      </node>
      <node id="2">
        <label>/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h</label>
        <link refid="GenerationPattern_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/padm/Optimizers_PADM.h</label>
        <link refid="Optimizers__PADM_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/dantzig-wolfe/ColumnGeneration.h</label>
        <link refid="ColumnGeneration_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceidol">idol</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="operators_8h_1a73d089ebab0de5f6f9cb3d8ac5a524da" prot="public" static="no">
        <name>DEFINE_OPERATOR_SINGLE</name>
        <param><defname>OPERATOR</defname></param>
        <param><defname>OPERATOR_EQ</defname></param>
        <param><defname>T</defname></param>
        <param><defname>U</defname></param>
        <param><defname>ResultT</defname></param>
        <initializer>static ResultT operator OPERATOR(T t_a, U t_b) { \
    ResultT result(std::move(t_a));                                   \
    result OPERATOR_EQ std::move(t_b);                                \
    return result; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="54" column="9" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="operators_8h_1a62caac33ecf0b572f26a9b78cc00f962" prot="public" static="no">
        <name>DEFINE_OPERATOR</name>
        <param><defname>OPERATOR</defname></param>
        <param><defname>OPERATOR_EQ</defname></param>
        <param><defname>T</defname></param>
        <param><defname>U</defname></param>
        <param><defname>ResultT</defname></param>
        <initializer>DEFINE_OPERATOR_SINGLE(OPERATOR, OPERATOR_EQ, T, U, ResultT) \
static ResultT operator OPERATOR(U t_a, T t_b) {             \
    ResultT result(std::move(t_a));          \
    result OPERATOR_EQ std::move(t_b);                 \
    return result;                            \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="61" column="9" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="operators_8h_1a1d3e55e80c51baf43775b7e6e2b639bb" prot="public" static="no">
        <name>DEFINE_COMMUTATIVE_OPERATOR_SINGLE</name>
        <param><defname>OPERATOR</defname></param>
        <param><defname>OPERATOR_EQ</defname></param>
        <param><defname>T</defname></param>
        <param><defname>U</defname></param>
        <param><defname>ResultT</defname></param>
        <initializer>static ResultT operator OPERATOR(T t_a, U t_b) { \
    ResultT result(std::move(t_b));                                   \
    result OPERATOR_EQ std::move(t_a);                                \
    return result; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="69" column="9" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="operators_8h_1a5893846ad7be5f428f9833498b1a1e58" prot="public" static="no">
        <name>DEFINE_COMMUTATIVE_OPERATOR</name>
        <param><defname>OPERATOR</defname></param>
        <param><defname>OPERATOR_EQ</defname></param>
        <param><defname>T</defname></param>
        <param><defname>U</defname></param>
        <param><defname>ResultT</defname></param>
        <initializer>DEFINE_COMMUTATIVE_OPERATOR_SINGLE(OPERATOR, OPERATOR_EQ, T, U, ResultT) \
static ResultT operator OPERATOR(U t_a, T t_b) {             \
    ResultT result(std::move(t_a));          \
    result OPERATOR_EQ std::move(t_b);                 \
    return result;                            \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="76" column="9" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="operators_8h_1a3bfea94633f57f1a8e115191f09ecc4e" prot="public" static="no">
        <name>DEFINE_OPERATIONS</name>
        <param><defname>T</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="84" column="9" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>henri<sp/>on<sp/>26/10/22.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>IDOL_OPERATORS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IDOL_OPERATORS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;operators_utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;idol/general/utils/Point.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;idol/mixed-integer/modeling/expressions/QuadExpr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;idol/mixed-integer/modeling/variables/Var.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;idol/mixed-integer/modeling/constraints/Ctr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">idol<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>evaluate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LinExpr&lt;T,<sp/>double&gt;&amp;<sp/>t_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&lt;T&gt;&amp;<sp/>t_values)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[var,<sp/>constant]<sp/>:<sp/>t_expr)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>constant<sp/>*<sp/>t_values.get(var);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>evaluate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AffExpr&lt;T,<sp/>double&gt;&amp;<sp/>t_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&lt;T&gt;&amp;<sp/>t_values)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t_expr.constant()<sp/>+<sp/>evaluate(t_expr.linear(),<sp/>t_values);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>evaluate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QuadExpr&lt;T,<sp/>double&gt;&amp;<sp/>t_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&lt;T&gt;&amp;<sp/>t_values)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>evaluate(t_expr.affine(),<sp/>t_values);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[pair,<sp/>constant]<sp/>:<sp/>t_expr)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>constant<sp/>*<sp/>t_values.get(pair.first)<sp/>*<sp/>t_values.get(pair.second);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KeyT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ValueT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">T&gt;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>LinExpr&lt;KeyT&gt;<sp/>evaluate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SparseVector&lt;KeyT,<sp/>ValueT&gt;&amp;<sp/>t_pattern,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointT&amp;<sp/>t_values)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LinExpr&lt;KeyT&gt;<sp/>result;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.reserve(t_pattern.size());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[key,<sp/>value]<sp/>:<sp/>t_pattern)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.set(key,<sp/>evaluate(value,<sp/>t_values));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_OPERATOR_SINGLE(OPERATOR,<sp/>OPERATOR_EQ,<sp/>T,<sp/>U,<sp/>ResultT)<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor">static<sp/>ResultT<sp/>operator<sp/>OPERATOR(T<sp/>t_a,<sp/>U<sp/>t_b)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ResultT<sp/>result(std::move(t_a));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>result<sp/>OPERATOR_EQ<sp/>std::move(t_b);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>result;<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_OPERATOR(OPERATOR,<sp/>OPERATOR_EQ,<sp/>T,<sp/>U,<sp/>ResultT)<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor">DEFINE_OPERATOR_SINGLE(OPERATOR,<sp/>OPERATOR_EQ,<sp/>T,<sp/>U,<sp/>ResultT)<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor">static<sp/>ResultT<sp/>operator<sp/>OPERATOR(U<sp/>t_a,<sp/>T<sp/>t_b)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ResultT<sp/>result(std::move(t_a));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>result<sp/>OPERATOR_EQ<sp/>std::move(t_b);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>result;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_COMMUTATIVE_OPERATOR_SINGLE(OPERATOR,<sp/>OPERATOR_EQ,<sp/>T,<sp/>U,<sp/>ResultT)<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor">static<sp/>ResultT<sp/>operator<sp/>OPERATOR(T<sp/>t_a,<sp/>U<sp/>t_b)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ResultT<sp/>result(std::move(t_b));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>result<sp/>OPERATOR_EQ<sp/>std::move(t_a);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>result;<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_COMMUTATIVE_OPERATOR(OPERATOR,<sp/>OPERATOR_EQ,<sp/>T,<sp/>U,<sp/>ResultT)<sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR_SINGLE(OPERATOR,<sp/>OPERATOR_EQ,<sp/>T,<sp/>U,<sp/>ResultT)<sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor">static<sp/>ResultT<sp/>operator<sp/>OPERATOR(U<sp/>t_a,<sp/>T<sp/>t_b)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ResultT<sp/>result(std::move(t_a));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>result<sp/>OPERATOR_EQ<sp/>std::move(t_b);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>result;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_OPERATIONS(T)<sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(+,<sp/>+=,<sp/>double,<sp/>LinExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(+,<sp/>+=,<sp/>double,<sp/>AffExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(+,<sp/>+=,<sp/>double,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(+,<sp/>+=,<sp/>T,<sp/>double,<sp/>AffExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR_SINGLE(+,<sp/>+=,<sp/>T,<sp/>T,<sp/>LinExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(+,<sp/>+=,<sp/>T,<sp/>LinExpr&lt;T&gt;,<sp/>LinExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(+,<sp/>+=,<sp/>T,<sp/>AffExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(+,<sp/>+=,<sp/>T,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR_SINGLE(+,<sp/>+=,<sp/>LinExpr&lt;T&gt;,<sp/>LinExpr&lt;T&gt;,<sp/>LinExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(+,<sp/>+=,<sp/>LinExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(+,<sp/>+=,<sp/>LinExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(+,<sp/>+=,<sp/>AffExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR_SINGLE(+,<sp/>+=,<sp/>AffExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR_SINGLE(+,<sp/>+=,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor">DEFINE_OPERATOR(-,<sp/>-=,<sp/>double,<sp/>T,<sp/>AffExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor">DEFINE_OPERATOR(-,<sp/>-=,<sp/>double,<sp/>LinExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor">DEFINE_OPERATOR(-,<sp/>-=,<sp/>double,<sp/>AffExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor">DEFINE_OPERATOR(-,<sp/>-=,<sp/>double,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor">DEFINE_OPERATOR_SINGLE(-,<sp/>-=,<sp/>T,<sp/>T,<sp/>LinExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor">DEFINE_OPERATOR(-,<sp/>-=,<sp/>T,<sp/>LinExpr&lt;T&gt;,<sp/>LinExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor">DEFINE_OPERATOR(-,<sp/>-=,<sp/>T,<sp/>AffExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor">DEFINE_OPERATOR(-,<sp/>-=,<sp/>T,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor">DEFINE_OPERATOR_SINGLE(-,<sp/>-=,<sp/>LinExpr&lt;T&gt;,<sp/>LinExpr&lt;T&gt;,<sp/>LinExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor">DEFINE_OPERATOR(-,<sp/>-=,<sp/>LinExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor">DEFINE_OPERATOR(-,<sp/>-=,<sp/>LinExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor">DEFINE_OPERATOR_SINGLE(-,<sp/>-=,<sp/>AffExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor">DEFINE_OPERATOR(-,<sp/>-=,<sp/>AffExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor">DEFINE_OPERATOR_SINGLE(-,<sp/>-=,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(*,<sp/>*=,<sp/>double,<sp/>T,<sp/>LinExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(*,<sp/>*=,<sp/>double,<sp/>LinExpr&lt;T&gt;,<sp/>LinExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(*,<sp/>*=,<sp/>double,<sp/>AffExpr&lt;T&gt;,<sp/>AffExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor">DEFINE_COMMUTATIVE_OPERATOR(*,<sp/>*=,<sp/>double,<sp/>QuadExpr&lt;T&gt;,<sp/>QuadExpr&lt;T&gt;)<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor">static<sp/>QuadExpr&lt;T&gt;<sp/>operator*(T<sp/>t_a,<sp/>T<sp/>t_b)<sp/>{<sp/>return<sp/>{<sp/>t_a,<sp/>t_b<sp/>};<sp/>}<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor">static<sp/>LinExpr&lt;T,<sp/>double&gt;<sp/>operator+(const<sp/>T&amp;<sp/>t_a)<sp/>{<sp/>return<sp/>t_a;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor">static<sp/>LinExpr&lt;T,<sp/>double&gt;<sp/>operator-(const<sp/>T&amp;<sp/>t_a)<sp/>{<sp/>return<sp/>{<sp/>-1.,<sp/>t_a<sp/>};<sp/>}<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor">static<sp/>QuadExpr&lt;T&gt;<sp/>operator*(const<sp/>T&amp;<sp/>t_a,<sp/>const<sp/>LinExpr&lt;T&gt;&amp;<sp/>t_b)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>QuadExpr&lt;T&gt;<sp/>result;<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>[var,<sp/>constant]<sp/>:<sp/>t_b)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>constant<sp/>*<sp/>(var<sp/>*<sp/>t_a);\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>result;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor">static<sp/>QuadExpr&lt;T&gt;<sp/>operator*(const<sp/>LinExpr&lt;T&gt;&amp;<sp/>t_a,<sp/>const<sp/>T&amp;<sp/>t_b)<sp/>{<sp/>return<sp/>t_b<sp/>*<sp/>t_a;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor">static<sp/>QuadExpr&lt;T&gt;<sp/>operator*(const<sp/>T&amp;<sp/>t_a,<sp/>const<sp/>AffExpr&lt;T&gt;&amp;<sp/>t_b)<sp/>{<sp/>return<sp/>t_a<sp/>*<sp/>t_b.constant()<sp/>+<sp/>t_a<sp/>*<sp/>t_b.linear();<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor">static<sp/>QuadExpr&lt;T&gt;<sp/>operator*(const<sp/>AffExpr&lt;T&gt;&amp;<sp/>t_a,<sp/>const<sp/>T&amp;<sp/>t_b)<sp/>{<sp/>return<sp/>t_b<sp/>*<sp/>t_a;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor">static<sp/>LinExpr&lt;T&gt;<sp/>operator/(const<sp/>T&amp;<sp/>t_a,<sp/>double<sp/>t_b)<sp/>{<sp/>return<sp/>(1./t_b)<sp/>*<sp/>t_a;<sp/>}<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor">static<sp/>LinExpr&lt;T&gt;<sp/>operator/(const<sp/>LinExpr&lt;T&gt;&amp;<sp/>t_a,<sp/>double<sp/>t_b)<sp/>{<sp/>return<sp/>(1./t_b)<sp/>*<sp/>t_a;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor">static<sp/>AffExpr&lt;T&gt;<sp/>operator/(const<sp/>AffExpr&lt;T&gt;&amp;<sp/>t_a,<sp/>double<sp/>t_b)<sp/>{<sp/>return<sp/>(1./t_b)<sp/>*<sp/>t_a;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor">static<sp/>QuadExpr&lt;T&gt;<sp/>operator/(const<sp/>QuadExpr&lt;T&gt;&amp;<sp/>t_a,<sp/>double<sp/>t_b)<sp/>{<sp/>return<sp/>(1./t_b)<sp/>*<sp/>t_a;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">idol<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>DEFINE_OPERATIONS(Var)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>DEFINE_OPERATIONS(Ctr)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//IDOL_OPERATORS_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h"/>
  </compounddef>
</doxygen>
