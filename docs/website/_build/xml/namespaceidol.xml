<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceidol" kind="namespace" language="C++">
    <compoundname>idol</compoundname>
    <innerclass refid="classidol_1_1MibSCallbackI" prot="public">idol::MibSCallbackI</innerclass>
    <innerclass refid="classidol_1_1MatrixIndices" prot="public">idol::MatrixIndices</innerclass>
    <innerclass refid="classidol_1_1Algorithm" prot="public">idol::Algorithm</innerclass>
    <innerclass refid="classidol_1_1Optimizer" prot="public">idol::Optimizer</innerclass>
    <innerclass refid="classidol_1_1OptimizerFactoryWithDefaultParameters" prot="public">idol::OptimizerFactoryWithDefaultParameters</innerclass>
    <innerclass refid="classidol_1_1OptimizerFactory" prot="public">idol::OptimizerFactory</innerclass>
    <innerclass refid="classidol_1_1Lazy" prot="public">idol::Lazy</innerclass>
    <innerclass refid="classidol_1_1OptimizerWithLazyUpdates" prot="public">idol::OptimizerWithLazyUpdates</innerclass>
    <innerclass refid="classidol_1_1Timer" prot="public">idol::Timer</innerclass>
    <innerclass refid="classidol_1_1Exception" prot="public">idol::Exception</innerclass>
    <innerclass refid="classidol_1_1NotImplemented" prot="public">idol::NotImplemented</innerclass>
    <innerclass refid="classidol_1_1Finally" prot="public">idol::Finally</innerclass>
    <innerclass refid="classidol_1_1GenerationPattern" prot="public">idol::GenerationPattern</innerclass>
    <innerclass refid="classidol_1_1GeneratorPool" prot="public">idol::GeneratorPool</innerclass>
    <innerclass refid="classidol_1_1IteratorForward" prot="public">idol::IteratorForward</innerclass>
    <innerclass refid="classidol_1_1ConstIteratorForward" prot="public">idol::ConstIteratorForward</innerclass>
    <innerclass refid="classidol_1_1LimitedWidthBuffer" prot="public">idol::LimitedWidthBuffer</innerclass>
    <innerclass refid="classidol_1_1LimitedWidthStream" prot="public">idol::LimitedWidthStream</innerclass>
    <innerclass refid="classidol_1_1Optional" prot="public">idol::Optional</innerclass>
    <innerclass refid="structidol_1_1Pair" prot="public">idol::Pair</innerclass>
    <innerclass refid="structidol_1_1CommutativePair" prot="public">idol::CommutativePair</innerclass>
    <innerclass refid="classidol_1_1Point" prot="public">idol::Point</innerclass>
    <innerclass refid="classidol_1_1SilentMode" prot="public">idol::SilentMode</innerclass>
    <innerclass refid="structidol_1_1get__id" prot="public">idol::get_id</innerclass>
    <innerclass refid="structidol_1_1get__id_3_01std_1_1pair_3_01Key1_00_01Key2_01_4_01_4" prot="public">idol::get_id&lt; std::pair&lt; Key1, Key2 &gt; &gt;</innerclass>
    <innerclass refid="structidol_1_1get__id_3_01idol_1_1Pair_3_01Key1_00_01Key2_01_4_01_4" prot="public">idol::get_id&lt; idol::Pair&lt; Key1, Key2 &gt; &gt;</innerclass>
    <innerclass refid="structidol_1_1identity" prot="public">idol::identity</innerclass>
    <innerclass refid="classidol_1_1SparseVector" prot="public">idol::SparseVector</innerclass>
    <innerclass refid="classidol_1_1Dim" prot="public">idol::Dim</innerclass>
    <innerclass refid="classidol_1_1Annotation" prot="public">idol::Annotation</innerclass>
    <innerclass refid="classidol_1_1Versions" prot="public">idol::Versions</innerclass>
    <innerclass refid="classidol_1_1Ctr" prot="public">idol::Ctr</innerclass>
    <innerclass refid="classidol_1_1CtrVersion" prot="public">idol::CtrVersion</innerclass>
    <innerclass refid="classidol_1_1QCtr" prot="public">idol::QCtr</innerclass>
    <innerclass refid="classidol_1_1QCtrVersion" prot="public">idol::QCtrVersion</innerclass>
    <innerclass refid="classidol_1_1SOSCtr" prot="public">idol::SOSCtr</innerclass>
    <innerclass refid="classidol_1_1SOSCtrVersion" prot="public">idol::SOSCtrVersion</innerclass>
    <innerclass refid="classidol_1_1AffExpr" prot="public">idol::AffExpr</innerclass>
    <innerclass refid="classidol_1_1TempCtr" prot="public">idol::TempCtr</innerclass>
    <innerclass refid="classidol_1_1TempQCtr" prot="public">idol::TempQCtr</innerclass>
    <innerclass refid="classidol_1_1LinExpr" prot="public">idol::LinExpr</innerclass>
    <innerclass refid="classidol_1_1Range" prot="public">idol::Range</innerclass>
    <innerclass refid="classidol_1_1QuadExpr" prot="public">idol::QuadExpr</innerclass>
    <innerclass refid="classidol_1_1Model" prot="public">idol::Model</innerclass>
    <innerclass refid="classidol_1_1Env" prot="public">idol::Env</innerclass>
    <innerclass refid="classidol_1_1Object" prot="public">idol::Object</innerclass>
    <innerclass refid="classidol_1_1ObjectId" prot="public">idol::ObjectId</innerclass>
    <innerclass refid="classidol_1_1Version" prot="public">idol::Version</innerclass>
    <innerclass refid="classidol_1_1Param" prot="public">idol::Param</innerclass>
    <innerclass refid="classidol_1_1TempVar" prot="public">idol::TempVar</innerclass>
    <innerclass refid="classidol_1_1Var" prot="public">idol::Var</innerclass>
    <innerclass refid="classidol_1_1VarVersion" prot="public">idol::VarVersion</innerclass>
    <innerclass refid="classidol_1_1BranchAndBound" prot="public">idol::BranchAndBound</innerclass>
    <innerclass refid="classidol_1_1BranchingRule" prot="public">idol::BranchingRule</innerclass>
    <innerclass refid="classidol_1_1BranchingRuleFactory" prot="public">idol::BranchingRuleFactory</innerclass>
    <innerclass refid="classidol_1_1BranchingWithPriority" prot="public">idol::BranchingWithPriority</innerclass>
    <innerclass refid="classidol_1_1Diver" prot="public">idol::Diver</innerclass>
    <innerclass refid="classidol_1_1FirstInfeasibleFound" prot="public">idol::FirstInfeasibleFound</innerclass>
    <innerclass refid="classidol_1_1LeastInfeasible" prot="public">idol::LeastInfeasible</innerclass>
    <innerclass refid="classidol_1_1MostInfeasible" prot="public">idol::MostInfeasible</innerclass>
    <innerclass refid="classidol_1_1PseudoCost" prot="public">idol::PseudoCost</innerclass>
    <innerclass refid="classidol_1_1StrongBranching" prot="public">idol::StrongBranching</innerclass>
    <innerclass refid="classidol_1_1UniformlyRandom" prot="public">idol::UniformlyRandom</innerclass>
    <innerclass refid="classidol_1_1VariableBranching" prot="public">idol::VariableBranching</innerclass>
    <innerclass refid="classidol_1_1NodeScoreFunction" prot="public">idol::NodeScoreFunction</innerclass>
    <innerclass refid="classidol_1_1StrongBranchingPhaseType" prot="public">idol::StrongBranchingPhaseType</innerclass>
    <innerclass refid="classidol_1_1StrongBranchingPhase" prot="public">idol::StrongBranchingPhase</innerclass>
    <innerclass refid="classidol_1_1BranchAndBoundCallback" prot="public">idol::BranchAndBoundCallback</innerclass>
    <innerclass refid="classidol_1_1AbstractBranchAndBoundCallbackI" prot="public">idol::AbstractBranchAndBoundCallbackI</innerclass>
    <innerclass refid="structidol_1_1SideEffectRegistry" prot="public">idol::SideEffectRegistry</innerclass>
    <innerclass refid="classidol_1_1BranchAndBoundCallbackI" prot="public">idol::BranchAndBoundCallbackI</innerclass>
    <innerclass refid="classidol_1_1BranchAndBoundCallbackFactory" prot="public">idol::BranchAndBoundCallbackFactory</innerclass>
    <innerclass refid="classidol_1_1CallbackAsBranchAndBoundCallback" prot="public">idol::CallbackAsBranchAndBoundCallback</innerclass>
    <innerclass refid="classidol_1_1BestBound" prot="public">idol::BestBound</innerclass>
    <innerclass refid="classidol_1_1BestEstimate" prot="public">idol::BestEstimate</innerclass>
    <innerclass refid="classidol_1_1BreadthFirst" prot="public">idol::BreadthFirst</innerclass>
    <innerclass refid="classidol_1_1DepthFirst" prot="public">idol::DepthFirst</innerclass>
    <innerclass refid="classidol_1_1NodeSelectionRule" prot="public">idol::NodeSelectionRule</innerclass>
    <innerclass refid="classidol_1_1NodeSelectionRuleFactory" prot="public">idol::NodeSelectionRuleFactory</innerclass>
    <innerclass refid="classidol_1_1WorstBound" prot="public">idol::WorstBound</innerclass>
    <innerclass refid="structidol_1_1VarBranchingDecision" prot="public">idol::VarBranchingDecision</innerclass>
    <innerclass refid="structidol_1_1CtrBranchingDecision" prot="public">idol::CtrBranchingDecision</innerclass>
    <innerclass refid="classidol_1_1DefaultNodeInfo" prot="public">idol::DefaultNodeInfo</innerclass>
    <innerclass refid="classidol_1_1DefaultNodeUpdator" prot="public">idol::DefaultNodeUpdator</innerclass>
    <innerclass refid="classidol_1_1Node" prot="public">idol::Node</innerclass>
    <innerclass refid="classidol_1_1NodeSet" prot="public">idol::NodeSet</innerclass>
    <innerclass refid="classidol_1_1NodeUpdator" prot="public">idol::NodeUpdator</innerclass>
    <innerclass refid="classidol_1_1CallbackI" prot="public">idol::CallbackI</innerclass>
    <innerclass refid="classidol_1_1Callback" prot="public">idol::Callback</innerclass>
    <innerclass refid="classidol_1_1CallbackFactory" prot="public">idol::CallbackFactory</innerclass>
    <innerclass refid="classidol_1_1LazyCutCallback" prot="public">idol::LazyCutCallback</innerclass>
    <innerclass refid="classidol_1_1UserCutCallback" prot="public">idol::UserCutCallback</innerclass>
    <innerclass refid="classidol_1_1ReducedCostFixing" prot="public">idol::ReducedCostFixing</innerclass>
    <innerclass refid="classidol_1_1DantzigWolfeDecomposition" prot="public">idol::DantzigWolfeDecomposition</innerclass>
    <innerclass refid="classidol_1_1PADM" prot="public">idol::PADM</innerclass>
    <innerclass refid="classidol_1_1PenaltyMethod" prot="public">idol::PenaltyMethod</innerclass>
    <innerclass refid="classidol_1_1PenaltyUpdate" prot="public">idol::PenaltyUpdate</innerclass>
    <innerclass refid="classidol_1_1Cplex" prot="public">idol::Cplex</innerclass>
    <innerclass refid="classidol_1_1GLPK" prot="public">idol::GLPK</innerclass>
    <innerclass refid="classidol_1_1Gurobi" prot="public">idol::Gurobi</innerclass>
    <innerclass refid="classidol_1_1GurobiCallbackI" prot="public">idol::GurobiCallbackI</innerclass>
    <innerclass refid="classidol_1_1HiGHS" prot="public">idol::HiGHS</innerclass>
    <innerclass refid="classidol_1_1Mosek" prot="public">idol::Mosek</innerclass>
    <innerclass refid="classidol_1_1Osi" prot="public">idol::Osi</innerclass>
    <innerclass refid="classidol_1_1OsiCplex" prot="public">idol::OsiCplex</innerclass>
    <innerclass refid="classidol_1_1OsiSymphony" prot="public">idol::OsiSymphony</innerclass>
    <innerclass refid="classidol_1_1OsiCbc" prot="public">idol::OsiCbc</innerclass>
    <innernamespace refid="namespaceidol_1_1ADM">idol::ADM</innernamespace>
    <innernamespace refid="namespaceidol_1_1Bilevel">idol::Bilevel</innernamespace>
    <innernamespace refid="namespaceidol_1_1BranchingRules">idol::BranchingRules</innernamespace>
    <innernamespace refid="namespaceidol_1_1CCG">idol::CCG</innernamespace>
    <innernamespace refid="namespaceidol_1_1Cuts">idol::Cuts</innernamespace>
    <innernamespace refid="namespaceidol_1_1DantzigWolfe">idol::DantzigWolfe</innernamespace>
    <innernamespace refid="namespaceidol_1_1Heuristics">idol::Heuristics</innernamespace>
    <innernamespace refid="namespaceidol_1_1impl">idol::impl</innernamespace>
    <innernamespace refid="namespaceidol_1_1Logs">idol::Logs</innernamespace>
    <innernamespace refid="namespaceidol_1_1NodeScoreFunctions">idol::NodeScoreFunctions</innernamespace>
    <innernamespace refid="namespaceidol_1_1NodeSelectionRules">idol::NodeSelectionRules</innernamespace>
    <innernamespace refid="namespaceidol_1_1Optimizers">idol::Optimizers</innernamespace>
    <innernamespace refid="namespaceidol_1_1PenaltyUpdates">idol::PenaltyUpdates</innernamespace>
    <innernamespace refid="namespaceidol_1_1Plots">idol::Plots</innernamespace>
    <innernamespace refid="namespaceidol_1_1Problems">idol::Problems</innernamespace>
    <innernamespace refid="namespaceidol_1_1Reformulators">idol::Reformulators</innernamespace>
    <innernamespace refid="namespaceidol_1_1Robust">idol::Robust</innernamespace>
    <innernamespace refid="namespaceidol_1_1StrongBranchingPhases">idol::StrongBranchingPhases</innernamespace>
    <innernamespace refid="namespaceidol_1_1Tolerance">idol::Tolerance</innernamespace>
    <innernamespace refid="namespaceidol_1_1Utils">idol::Utils</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="types_8h_1aed6f72cffd69b0185a06a0484a83eabf" prot="public" static="no" strong="no">
        <type></type>
        <name>SolutionStatus</name>
        <enumvalue id="types_8h_1aed6f72cffd69b0185a06a0484a83eabfa90079e2931d11432a966cacf9a107e29" prot="public">
          <name>Loaded</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aed6f72cffd69b0185a06a0484a83eabfa15474b6da144604dbd19b29b7b8416f3" prot="public">
          <name>Optimal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aed6f72cffd69b0185a06a0484a83eabfa4fd4eaac5243e25c0167e2eb44a40375" prot="public">
          <name>Feasible</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aed6f72cffd69b0185a06a0484a83eabfa6d7a54c994a618f880ef823d283fe9a0" prot="public">
          <name>Infeasible</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aed6f72cffd69b0185a06a0484a83eabfaead8bb73eb3f5b0d1ca28d24e3400062" prot="public">
          <name>InfOrUnbnd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aed6f72cffd69b0185a06a0484a83eabfa2dd03ddd8d67574eec63ce9869f74cd1" prot="public">
          <name>Unbounded</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aed6f72cffd69b0185a06a0484a83eabfadfd63b4f5b2cf5b130ae5f1ec0b2f153" prot="public">
          <name>Fail</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aed6f72cffd69b0185a06a0484a83eabfaa1046a2eb09f9d38e890737071ff13fc" prot="public">
          <name>SubOptimal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" line="16" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" bodystart="16" bodyend="25"/>
      </memberdef>
      <memberdef kind="enum" id="types_8h_1aec531acf59cf25660d56c2204bc1362d" prot="public" static="no" strong="no">
        <type></type>
        <name>SolutionReason</name>
        <enumvalue id="types_8h_1aec531acf59cf25660d56c2204bc1362da2706060a6526c1076dda4b905dab8f94" prot="public">
          <name>NotSpecified</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aec531acf59cf25660d56c2204bc1362da91d5f2bc40a2668a125567055986e53a" prot="public">
          <name>Proved</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aec531acf59cf25660d56c2204bc1362dae8f8f321a00f617b1382045f9bbd9e25" prot="public">
          <name>TimeLimit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aec531acf59cf25660d56c2204bc1362dab552ddad81e71e8b7ebe60361d3d1cd8" prot="public">
          <name>IterLimit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aec531acf59cf25660d56c2204bc1362da136616b2a7157d3d2d58bf5f8c2aaea9" prot="public">
          <name>ObjLimit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aec531acf59cf25660d56c2204bc1362da7bf32f0ca2e9aac285308c1c02a76888" prot="public">
          <name>Numerical</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aec531acf59cf25660d56c2204bc1362dab2df32c779d82edbf1f970dd9c904e6d" prot="public">
          <name>MemoryLimit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aec531acf59cf25660d56c2204bc1362da36e9589925e108bf8e3d1264db16b6a1" prot="public">
          <name>Cycling</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1aec531acf59cf25660d56c2204bc1362da3f38395f41a5f2c5c1d2090ec64ff802" prot="public">
          <name>SolutionLimit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" line="27" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" bodystart="27" bodyend="37"/>
      </memberdef>
      <memberdef kind="enum" id="Types_8h_1a7e1ba259c5ba7c2b5da5737f08901de4" prot="public" static="no" strong="no">
        <type>int</type>
        <name>VarType</name>
        <enumvalue id="Types_8h_1a7e1ba259c5ba7c2b5da5737f08901de4a1f1f1955b8046afe5b5deb2e171b4e2b" prot="public">
          <name>Continuous</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Types_8h_1a7e1ba259c5ba7c2b5da5737f08901de4ad132071edd74adfb23a761847024e853" prot="public">
          <name>Integer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Types_8h_1a7e1ba259c5ba7c2b5da5737f08901de4af3d2e545995e68417d81b76958f9ca42" prot="public">
          <name>Binary</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" line="12" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" bodystart="12" bodyend="16"/>
      </memberdef>
      <memberdef kind="enum" id="Types_8h_1a3593491bb31dd66c31fdec1c8ed37938" prot="public" static="no" strong="no">
        <type>int</type>
        <name>CtrType</name>
        <enumvalue id="Types_8h_1a3593491bb31dd66c31fdec1c8ed37938a4b076b958390cb6fe9ace03531e35aea" prot="public">
          <name>LessOrEqual</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Types_8h_1a3593491bb31dd66c31fdec1c8ed37938ada4ea9a28081ffb4e5289b75a9b3789d" prot="public">
          <name>GreaterOrEqual</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Types_8h_1a3593491bb31dd66c31fdec1c8ed37938afd0f6d72633a1a2f1eba3b3bf24e0327" prot="public">
          <name>Equal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" line="18" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="enum" id="Types_8h_1a944facbc29f94bda630c02442aa5bd58" prot="public" static="no" strong="no">
        <type>int</type>
        <name>ObjectiveSense</name>
        <enumvalue id="Types_8h_1a944facbc29f94bda630c02442aa5bd58a0cff665efc919cedb2a078563c79690f" prot="public">
          <name>Minimize</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Types_8h_1a944facbc29f94bda630c02442aa5bd58a911eb835575e2420631afd477cddbfe4" prot="public">
          <name>Maximize</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" line="24" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="enum" id="Callback_8h_1aa5164c6ad125b26991afc57cf3b7daf9" prot="public" static="no" strong="no">
        <type></type>
        <name>CallbackEvent</name>
        <enumvalue id="Callback_8h_1aa5164c6ad125b26991afc57cf3b7daf9af27b6da19e8097024fd4da643d3d97dc" prot="public">
          <name>NodeLoaded</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Occurs when a node is about to be solved </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Callback_8h_1aa5164c6ad125b26991afc57cf3b7daf9a43e3a1c08b798ece9c324af92077ded5" prot="public">
          <name>IncumbentSolution</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Occurs when an incumbent solution has been found </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Callback_8h_1aa5164c6ad125b26991afc57cf3b7daf9adad91457d5da35ed7df22acbd20b0048" prot="public">
          <name>InvalidSolution</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Occurs when a solution of the relaxation is not valid (e.g., not integer) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Callback_8h_1aa5164c6ad125b26991afc57cf3b7daf9a2e93cd946d51f89f29aa4a84f1a26bcc" prot="public">
          <name>PrunedSolution</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CallbackEvent is an enumerated type used to indicate events during a branch-and-bound tree execution.</para>
<para>It is typically used inside of a <ref refid="classidol_1_1Callback" kindref="compound">Callback</ref> to influence or modify the behaviour of the algorithm at execution time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/callbacks/Callback.h" line="20" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/callbacks/Callback.h" bodystart="20" bodyend="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="Map_8h_1a823899c2639cf250cd2afee2ad60e008" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class KeyT</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Hash</type>
            <defval>impl::hash&lt;KeyT&gt;</defval>
          </param>
          <param>
            <type>class KeyEqual</type>
            <defval>std::equal_to&lt;KeyT&gt;</defval>
          </param>
          <param>
            <type>class Allocator</type>
            <defval>std::allocator&lt;std::pair&lt;const KeyT, T&gt; &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; KeyT, T, Hash, KeyEqual, Allocator &gt;</type>
        <definition>using idol::Map = typedef std::unordered_map&lt;KeyT, T, Hash, KeyEqual, Allocator&gt;</definition>
        <argsstring></argsstring>
        <name>Map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Map.h" line="92" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Map.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Point_8h_1a21f004fa4468e89bb38fbc3e911c8107" prot="public" static="no">
        <type><ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>using idol::PrimalPoint = typedef Point&lt;Var&gt;</definition>
        <argsstring></argsstring>
        <name>PrimalPoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" line="16" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Point_8h_1a7f91eb55614110dbc5df566c8d59902a" prot="public" static="no">
        <type><ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>using idol::DualPoint = typedef Point&lt;Ctr&gt;</definition>
        <argsstring></argsstring>
        <name>DualPoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" line="17" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Set_8h_1a6aecb1ff4a08b36ea389cf6ec5a385ea" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Key</type>
          </param>
          <param>
            <type>class Hash</type>
            <defval>std::hash&lt;Key&gt;</defval>
          </param>
          <param>
            <type>class KeyEqual</type>
            <defval>std::equal_to&lt;Key&gt;</defval>
          </param>
          <param>
            <type>class Allocator</type>
            <defval>std::allocator&lt;Key&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::unordered_set&lt; Key, Hash, KeyEqual, Allocator &gt;</type>
        <definition>using idol::Set = typedef std::unordered_set&lt;Key, Hash, KeyEqual, Allocator&gt;</definition>
        <argsstring></argsstring>
        <name>Set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Set.h" line="17" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Set.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Vector_8h_1a8b7302bb2b01a5ae774cdccb556856a6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>1</defval>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structidol_1_1impl_1_1Vector" kindref="compound">impl::Vector</ref>&lt; T, N &gt;::type</type>
        <definition>using idol::Vector = typedef typename impl::Vector&lt;T, N&gt;::type</definition>
        <argsstring></argsstring>
        <name>Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" line="42" column="21" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="numericals_8h_1a9fc6648f52eb7472d4db3196fc2f04e0" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double idol::Inf</definition>
        <argsstring></argsstring>
        <name>Inf</name>
        <initializer>= 1e20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="17" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Model_8h_1a5588357a9d58e4e70050a3de903d23d1" prot="public" static="yes" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int idol::MasterId</definition>
        <argsstring></argsstring>
        <name>MasterId</name>
        <initializer>= std::numeric_limits&lt;unsigned int&gt;::max()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="31" column="31" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bilevel_2optimizers_2KKT_2KKT_8h_1a46a0488d7f5f467d54a01ec9264a4c81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1Bilevel_1_1KKT" kindref="compound">Bilevel::KKT</ref></type>
        <definition>static Bilevel::KKT idol::operator+</definition>
        <argsstring>(const Bilevel::KKT &amp;t_strong_duality, const OptimizerFactory &amp;t_optimizer)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1Bilevel_1_1KKT" kindref="compound">Bilevel::KKT</ref> &amp;</type>
          <declname>t_strong_duality</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1OptimizerFactory" kindref="compound">OptimizerFactory</ref> &amp;</type>
          <declname>t_optimizer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/bilevel/optimizers/KKT/KKT.h" line="48" column="25" bodyfile="/home/henri/Research/idol/lib/include/idol/bilevel/optimizers/KKT/KKT.h" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="PessimisticAsOptimistic_8h_1aa2e41a0d087f7daad297e18c01684425" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1Bilevel_1_1PessimisticAsOptimistic" kindref="compound">Bilevel::PessimisticAsOptimistic</ref></type>
        <definition>static Bilevel::PessimisticAsOptimistic idol::operator+</definition>
        <argsstring>(const Bilevel::PessimisticAsOptimistic &amp;t_pessimistic_as_optimistic, const OptimizerFactory &amp;t_optimizer)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1Bilevel_1_1PessimisticAsOptimistic" kindref="compound">Bilevel::PessimisticAsOptimistic</ref> &amp;</type>
          <declname>t_pessimistic_as_optimistic</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1OptimizerFactory" kindref="compound">OptimizerFactory</ref> &amp;</type>
          <declname>t_optimizer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/bilevel/optimizers/PessimisticAsOptimistic/PessimisticAsOptimistic.h" line="42" column="45" bodyfile="/home/henri/Research/idol/lib/include/idol/bilevel/optimizers/PessimisticAsOptimistic/PessimisticAsOptimistic.h" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="StrongDuality_8h_1a19407af4bca354ab39cc86932c150a35" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1Bilevel_1_1StrongDuality" kindref="compound">Bilevel::StrongDuality</ref></type>
        <definition>static Bilevel::StrongDuality idol::operator+</definition>
        <argsstring>(const Bilevel::StrongDuality &amp;t_strong_duality, const OptimizerFactory &amp;t_optimizer)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1Bilevel_1_1StrongDuality" kindref="compound">Bilevel::StrongDuality</ref> &amp;</type>
          <declname>t_strong_duality</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1OptimizerFactory" kindref="compound">OptimizerFactory</ref> &amp;</type>
          <declname>t_optimizer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/bilevel/optimizers/StrongDuality/StrongDuality.h" line="40" column="35" bodyfile="/home/henri/Research/idol/lib/include/idol/bilevel/optimizers/StrongDuality/StrongDuality.h" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="numericals_8h_1a0f85b9e99c3d86e0f88e837fc3034899" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool idol::is_pos_inf</definition>
        <argsstring>(double t_value)</argsstring>
        <name>is_pos_inf</name>
        <param>
          <type>double</type>
          <declname>t_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="95" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="numericals_8h_1a7039c972e7bfb05db5b1b6256426642b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool idol::is_neg_inf</definition>
        <argsstring>(double t_value)</argsstring>
        <name>is_neg_inf</name>
        <param>
          <type>double</type>
          <declname>t_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="99" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="numericals_8h_1a63d2ae1c0f54e7a938b963104ee4a2c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool idol::is_inf</definition>
        <argsstring>(double t_value)</argsstring>
        <name>is_inf</name>
        <param>
          <type>double</type>
          <declname>t_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="103" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="numericals_8h_1adeaee3683574c03fd5932936b0668ee0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool idol::equals</definition>
        <argsstring>(double t_a, double t_b, double t_tolerance)</argsstring>
        <name>equals</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="107" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="numericals_8h_1a1d381ee287ccf959bce9f41b78cc178b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool idol::is</definition>
        <argsstring>(double t_a, CtrType t_type, double t_b, double t_tolerance)</argsstring>
        <name>is</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>CtrType</type>
          <declname>t_type</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="111" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="111" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="numericals_8h_1ac7d3c4c2fd99059c3b7b3a3ac1663bf7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double idol::relative_gap</definition>
        <argsstring>(double t_lb, double t_ub)</argsstring>
        <name>relative_gap</name>
        <param>
          <type>double</type>
          <declname>t_lb</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_ub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="126" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="126" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="numericals_8h_1aba6501427f4727859577e8c2998eeb7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double idol::absolute_gap</definition>
        <argsstring>(double t_lb, double t_ub)</argsstring>
        <name>absolute_gap</name>
        <param>
          <type>double</type>
          <declname>t_lb</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_ub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="135" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="135" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="numericals_8h_1a8da9bbb4dde040862b38339ba6a09741" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool idol::is_zero</definition>
        <argsstring>(double t_value, double t_tolerance)</argsstring>
        <name>is_zero</name>
        <param>
          <type>double</type>
          <declname>t_value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="142" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="numericals_8h_1a58ae2541bed5697bee8c2b4e99845a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().is_zero(.1))</type>
        <definition>decltype(std::declval&lt;T&gt;().is_zero(.1)) idol::is_zero</definition>
        <argsstring>(const T &amp;t_expr, double t_tolerance)</argsstring>
        <name>is_zero</name>
        <param>
          <type>const T &amp;</type>
          <declname>t_expr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="147" column="14" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="numericals_8h_1a773f337b51dc58d617c1778c3fd94913" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool idol::is_integer</definition>
        <argsstring>(double t_value, double t_tolerance)</argsstring>
        <name>is_integer</name>
        <param>
          <type>double</type>
          <declname>t_value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="151" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="numericals_8h_1ae73dc591db9b39c96d647835a0615f01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double idol::round</definition>
        <argsstring>(double t_value, unsigned int t_n_digits=0)</argsstring>
        <name>round</name>
        <param>
          <type>double</type>
          <declname>t_value</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>t_n_digits</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/numericals.h" line="155" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/general/numericals.h" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="logs_8h_1aa73eeb5d11d036b78e4b04129d1b263d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; idol::center</definition>
        <argsstring>(std::ostream &amp;t_os, const std::string &amp;t_string, unsigned int t_width, char t_fill=&apos; &apos;)</argsstring>
        <name>center</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_string</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>t_width</declname>
        </param>
        <param>
          <type>char</type>
          <declname>t_fill</declname>
          <defval>&apos; &apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/logs.h" line="14" column="18" declfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/logs.h" declline="14" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="logs_8h_1a56667673953f3c9bb40d7458d070de5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string idol::pretty_double</definition>
        <argsstring>(double t_value, unsigned int t_precision=Tolerance::Digits)</argsstring>
        <name>pretty_double</name>
        <param>
          <type>double</type>
          <declname>t_value</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>t_precision</declname>
          <defval>Tolerance::Digits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/optimizers/logs.h" line="16" column="17" declfile="/home/henri/Research/idol/lib/include/idol/general/optimizers/logs.h" declline="16" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a2e64fdfc4a7511d3b076256fda831ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="121" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="121" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1afe27ad4826dd8dfd6025f0ae6a865c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator+</definition>
        <argsstring>(const CoefficientT &amp;t_gen, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_other)</argsstring>
        <name>operator+</name>
        <param>
          <type>const CoefficientT &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="150" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="150" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a9a04e5447e670395fd11b59f3d30900f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator+</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_other, const CoefficientT &amp;t_gen)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_other</declname>
        </param>
        <param>
          <type>const CoefficientT &amp;</type>
          <declname>t_gen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="158" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1ad060f52f2e6bd3fe9b2942961cb93d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator+</definition>
        <argsstring>(const idol::LinExpr&lt; CoefficientT &gt; &amp;t_gen, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_other)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">idol::LinExpr</ref>&lt; CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="165" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="165" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a2f5ba294c15cee2a4c7e35eaf592a9be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator+</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_other, const idol::LinExpr&lt; CoefficientT &gt; &amp;t_gen)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_other</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">idol::LinExpr</ref>&lt; CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="173" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="173" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a4d9074ee2be8e0c256bac180c9ec46ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator+</definition>
        <argsstring>(const idol::AffExpr&lt; CoefficientT &gt; &amp;t_gen, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_other)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">idol::AffExpr</ref>&lt; CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="181" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="181" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a61f3dc1b0fb1d0caeee9ae58c24f73ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator-</definition>
        <argsstring>(const idol::LinExpr&lt; CoefficientT &gt; &amp;t_gen, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_other)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">idol::LinExpr</ref>&lt; CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="189" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1ad8db20259d3678e3a59690c704368262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator-</definition>
        <argsstring>(const idol::AffExpr&lt; CoefficientT &gt; &amp;t_gen, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_other)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">idol::AffExpr</ref>&lt; CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="197" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="197" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a83065dff348e1bf19e82f4e224ed3668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator-</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen, const idol::LinExpr&lt; CoefficientT &gt; &amp;t_other)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">idol::LinExpr</ref>&lt; CoefficientT &gt; &amp;</type>
          <declname>t_other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="205" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="205" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1aead4c5ba6bb973e1442ceee4a19be33c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator-</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen, const idol::AffExpr&lt; CoefficientT &gt; &amp;t_other)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">idol::AffExpr</ref>&lt; CoefficientT &gt; &amp;</type>
          <declname>t_other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="213" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="213" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a8e978cb2f15676db42a1183ae4ba454a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator+</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_other, const idol::AffExpr&lt; CoefficientT &gt; &amp;t_gen)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_other</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">idol::AffExpr</ref>&lt; CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="221" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="221" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a000e06795ee230a5a0b43a774cb090cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator*</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen, const typename idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt;::KeyT &amp;t_key)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>const typename <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;::KeyT &amp;</type>
          <declname>t_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="230" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="230" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1ae0bd2c787e7064ba66496de64b1761ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator*</definition>
        <argsstring>(const typename idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt;::KeyT &amp;t_key, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen)</argsstring>
        <name>operator*</name>
        <param>
          <type>const typename <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;::KeyT &amp;</type>
          <declname>t_key</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="239" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="239" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a9d52f126249dca2d4646825e72cb9b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator+</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen1, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen1</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="248" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="248" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1ae8b4a6a40b41ddfa1075480d241ff1c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator-</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen1, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen1</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="257" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="257" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a9e284e6c9a19d3f01feea46c52e9f1c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator-</definition>
        <argsstring>(const CoefficientT &amp;t_gen1, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const CoefficientT &amp;</type>
          <declname>t_gen1</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="266" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="266" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a4933275b0b802cf0044c6b4690092cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator-</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen1, const CoefficientT &amp;t_gen2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen1</declname>
        </param>
        <param>
          <type>const CoefficientT &amp;</type>
          <declname>t_gen2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="276" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="276" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a558cd2197845e012f737776bfc2a163a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator+</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen, double t_scalar)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="285" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1ae5e20d52110dfddd9151fb09df249a8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator-</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen, double t_scalar)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="293" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="293" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a8924f54414d4607e305a5b685de66187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator+</definition>
        <argsstring>(double t_scalar, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen)</argsstring>
        <name>operator+</name>
        <param>
          <type>double</type>
          <declname>t_scalar</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="301" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="301" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1ae7eacc47227bb26cda23b95ae128df08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator-</definition>
        <argsstring>(double t_scalar, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen)</argsstring>
        <name>operator-</name>
        <param>
          <type>double</type>
          <declname>t_scalar</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="309" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="309" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a6e45bd089a49668e1f096c110e1bb248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator*</definition>
        <argsstring>(const double t_scalar, const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen)</argsstring>
        <name>operator*</name>
        <param>
          <type>const double</type>
          <declname>t_scalar</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="317" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="317" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a7eec9ed87cf69a82d3099f2e919f11b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator*</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen, const double t_scalar)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>t_scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="325" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="325" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1aedc210a708f9a1f8a17f949af8d5a589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator/</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen, const double t_scalar)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>t_scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="333" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="333" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a8a7d22205cd5efb7cea9f59166a849c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">idol::Ctr</ref> &gt;</type>
        <definition>static idol::GenerationPattern&lt;idol::Ctr&gt; idol::operator!</definition>
        <argsstring>(const idol::Var &amp;t_var)</argsstring>
        <name>operator!</name>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">idol::Var</ref> &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="339" column="36" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="339" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="GenerationPattern_8h_1a4d0e993f84fd3842dd5f5e5a0492deaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeneratedT</type>
          </param>
          <param>
            <type>class CoefficientT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt;</type>
        <definition>idol::GenerationPattern&lt;GeneratedT, CoefficientT&gt; idol::operator!</definition>
        <argsstring>(const idol::GenerationPattern&lt; GeneratedT, CoefficientT &gt; &amp;t_gen)</argsstring>
        <name>operator!</name>
        <param>
          <type>const <ref refid="classidol_1_1GenerationPattern" kindref="compound">idol::GenerationPattern</ref>&lt; GeneratedT, CoefficientT &gt; &amp;</type>
          <declname>t_gen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" line="347" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/GenerationPattern.h" bodystart="347" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="Optional_8h_1a3820c334be1186a99961f5beccc202a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1Optional" kindref="compound">Optional</ref>&lt; T &gt;</type>
        <definition>Optional&lt;T&gt; idol::make_optional</definition>
        <argsstring>(ArgsT &amp;&amp;...t_args)</argsstring>
        <name>make_optional</name>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>t_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Optional.h" line="95" column="14" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Optional.h" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="Pair_8h_1a64c3a924e02a035929fd2d2fa40a8925" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const Pair&lt; T1, T2 &gt; &amp;t_pair)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="structidol_1_1Pair" kindref="compound">Pair</ref>&lt; T1, T2 &gt; &amp;</type>
          <declname>t_pair</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Pair.h" line="56" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Pair.h" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="Point_8h_1ac79f3d2416cb0874106a6c1063c5b5a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const Point&lt; T &gt; &amp;t_point)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;</type>
          <declname>t_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" line="68" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="Point_8h_1a8aefe51785bc732fd168a6a7f86f2784" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt;</type>
        <definition>static Point&lt;T&gt; idol::operator+</definition>
        <argsstring>(Point&lt; T &gt; &amp;&amp;t_x, Point&lt; T &gt; &amp;&amp;t_y)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>t_x</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>t_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" line="77" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="Point_8h_1aaba3ada72f0ea550910976c808ab8bee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt;</type>
        <definition>static Point&lt;T&gt; idol::operator+</definition>
        <argsstring>(Point&lt; T &gt; &amp;&amp;t_x, const Point&lt; T &gt; &amp;t_y)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>t_x</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;</type>
          <declname>t_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" line="78" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="Point_8h_1a0129c0c0527404098fd88f68ae6e7beb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt;</type>
        <definition>static Point&lt;T&gt; idol::operator+</definition>
        <argsstring>(const Point&lt; T &gt; &amp;t_x, Point&lt; T &gt; &amp;&amp;t_y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;</type>
          <declname>t_x</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>t_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" line="79" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="Point_8h_1a86dfdb8642406575f50125ea901b6b0d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt;</type>
        <definition>static Point&lt;T&gt; idol::operator+</definition>
        <argsstring>(const Point&lt; T &gt; &amp;t_x, const Point&lt; T &gt; &amp;t_y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;</type>
          <declname>t_x</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;</type>
          <declname>t_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" line="80" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="Point_8h_1a9244fc48c6bb62818ad5e4a6a4b5076b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt;</type>
        <definition>static Point&lt;T&gt; idol::operator*</definition>
        <argsstring>(double t_factor, const Point&lt; T &gt; &amp;t_y)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>t_factor</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;</type>
          <declname>t_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" line="82" column="29" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Point.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="sort_8h_1a6e02fc094a0b21f9ad6503ce90f694cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void idol::apply_permutation</definition>
        <argsstring>(const std::vector&lt; unsigned int &gt; &amp;t_permutation, std::vector&lt; T &gt; &amp;t_arg)</argsstring>
        <name>apply_permutation</name>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>t_permutation</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>t_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/sort.h" line="38" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/sort.h" bodystart="38" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="sort_8h_1a597b2cee6aac4935d3c74d26a3b3e768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FirstT</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void idol::apply_permutation</definition>
        <argsstring>(const std::vector&lt; unsigned int &gt; &amp;t_permutation, std::vector&lt; FirstT &gt; &amp;t_first, std::vector&lt; T &gt; &amp;...t_args)</argsstring>
        <name>apply_permutation</name>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>t_permutation</declname>
        </param>
        <param>
          <type>std::vector&lt; FirstT &gt; &amp;</type>
          <declname>t_first</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;...</type>
          <declname>t_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/sort.h" line="69" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/sort.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="sort_8h_1a9981a43b69ee8476389140ef1519527f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IndexT</type>
          </param>
          <param>
            <type>class IndexExtractor</type>
            <defval>identity&lt;IndexT&gt;</defval>
          </param>
          <param>
            <type>class ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void idol::sort</definition>
        <argsstring>(std::vector&lt; IndexT &gt; &amp;t_index, std::vector&lt; T &gt; &amp;... t_args)</argsstring>
        <name>sort</name>
        <param>
          <type>std::vector&lt; IndexT &gt; &amp;</type>
          <declname>t_index</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;...</type>
          <declname>t_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/sort.h" line="75" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/sort.h" bodystart="75" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="SparseVector_8h_1a5072ff279af90a8415741d1b9ab1a76a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IndexT</type>
          </param>
          <param>
            <type>class ValueT</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_stream, const idol::SparseVector&lt; IndexT, ValueT &gt; &amp;t_vector)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_stream</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1SparseVector" kindref="compound">idol::SparseVector</ref>&lt; IndexT, ValueT &gt; &amp;</type>
          <declname>t_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" line="301" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" bodystart="301" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="SparseVector_8h_1a907157408b80fccdc54d32f325802223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IndexT</type>
          </param>
          <param>
            <type>class ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt;</type>
        <definition>SparseVector&lt;IndexT, ValueT&gt; idol::operator+</definition>
        <argsstring>(SparseVector&lt; IndexT, ValueT &gt; &amp;&amp;t_x, const SparseVector&lt; IndexT, ValueT &gt; &amp;t_y)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt; &amp;&amp;</type>
          <declname>t_x</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt; &amp;</type>
          <declname>t_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" line="311" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" bodystart="311" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="SparseVector_8h_1a2a76be3a637fc97a10a38ba73ae3152a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IndexT</type>
          </param>
          <param>
            <type>class ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt;</type>
        <definition>SparseVector&lt;IndexT, ValueT&gt; idol::operator+</definition>
        <argsstring>(const SparseVector&lt; IndexT, ValueT &gt; &amp;t_x, SparseVector&lt; IndexT, ValueT &gt; &amp;&amp;t_y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt; &amp;</type>
          <declname>t_x</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt; &amp;&amp;</type>
          <declname>t_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" line="316" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="SparseVector_8h_1ac4e90df747edf2089d567120a71c0f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IndexT</type>
          </param>
          <param>
            <type>class ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt;</type>
        <definition>SparseVector&lt;IndexT, ValueT&gt; idol::operator+</definition>
        <argsstring>(const SparseVector&lt; IndexT, ValueT &gt; &amp;t_x, const SparseVector&lt; IndexT, ValueT &gt; &amp;t_y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt; &amp;</type>
          <declname>t_x</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt; &amp;</type>
          <declname>t_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" line="321" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" bodystart="321" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="SparseVector_8h_1aea0c9d8d674318a994c1046e83fd41d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IndexT</type>
          </param>
          <param>
            <type>class ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt;</type>
        <definition>SparseVector&lt;IndexT, ValueT&gt; idol::operator-</definition>
        <argsstring>(SparseVector&lt; IndexT, ValueT &gt; t_x, const SparseVector&lt; IndexT, ValueT &gt; &amp;t_y)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt;</type>
          <declname>t_x</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt; &amp;</type>
          <declname>t_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" line="326" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" bodystart="326" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="SparseVector_8h_1a66e1a44fe3a903a3343278358cb2c9b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IndexT</type>
          </param>
          <param>
            <type>class ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt;</type>
        <definition>SparseVector&lt;IndexT, ValueT&gt; idol::operator+</definition>
        <argsstring>(SparseVector&lt; IndexT, ValueT &gt; t_x, double t_factor)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt;</type>
          <declname>t_x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" line="331" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" bodystart="331" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="SparseVector_8h_1acea550e1d442ebc52cbc36ea5839c33b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IndexT</type>
          </param>
          <param>
            <type>class ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt;</type>
        <definition>SparseVector&lt;IndexT, ValueT&gt; idol::operator+</definition>
        <argsstring>(double t_factor, SparseVector&lt; IndexT, ValueT &gt; t_x)</argsstring>
        <name>operator+</name>
        <param>
          <type>double</type>
          <declname>t_factor</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; IndexT, ValueT &gt;</type>
          <declname>t_x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" line="336" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/SparseVector.h" bodystart="336" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="types_8h_1ae103503cd200c6b50b92984dcbda460f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool idol::is_in</definition>
        <argsstring>()</argsstring>
        <name>is_in</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" line="40" column="10" declfile="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="types_8h_1af909d82fcca8e35198f5179cec0567e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool idol::is_in</definition>
        <argsstring>(T t_status, std::initializer_list&lt; T &gt; t_list)</argsstring>
        <name>is_in</name>
        <param>
          <type>T</type>
          <declname>t_status</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>t_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" line="43" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" bodystart="43" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="types_8h_1af0a4c8fcb55e9ef065bf37731c68eb59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool idol::is_in</definition>
        <argsstring>(typename T::value_type t_status, const T &amp;t_list)</argsstring>
        <name>is_in</name>
        <param>
          <type>typename T::value_type</type>
          <declname>t_status</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" line="53" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" bodystart="53" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="types_8h_1a27e5d448b30e8b6778ac4a098a180b25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SolutionStatus</type>
        <definition>static SolutionStatus idol::dual</definition>
        <argsstring>(SolutionStatus t_status)</argsstring>
        <name>dual</name>
        <param>
          <type>SolutionStatus</type>
          <declname>t_status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" line="62" column="27" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" bodystart="62" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="types_8h_1a1a453998cfb1ca1d3e1a249f050e6fc7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, SolutionStatus t_status)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>SolutionStatus</type>
          <declname>t_status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" line="84" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" bodystart="84" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="types_8h_1ae7cabfab9239eeb27e5bbbd3d6d1016b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, SolutionReason t_status)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>SolutionReason</type>
          <declname>t_status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" line="109" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/types.h" bodystart="109" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="uuid_8h_1a7ca151a30b88c446aeb14637c759dc48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string idol::generate_uuid_v4</definition>
        <argsstring>()</argsstring>
        <name>generate_uuid_v4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/uuid.h" line="13" column="17" declfile="/home/henri/Research/idol/lib/include/idol/general/utils/uuid.h" declline="13" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8h_1a4e9a23d083484bc7896b54c7f1e5d97d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>unsigned int</type>
        <definition>unsigned int idol::n_entries</definition>
        <argsstring>(const Vector&lt; T, Size &gt; &amp;t_vector)</argsstring>
        <name>n_entries</name>
        <param>
          <type>const Vector&lt; T, Size &gt; &amp;</type>
          <declname>t_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" line="46" column="18" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" bodystart="46" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8h_1aa77bd2f9c6447bbf396c6c0178f2cdd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void idol::append</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;t_dest, const Vector&lt; T, Size &gt; &amp;t_vector)</argsstring>
        <name>append</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>t_dest</declname>
        </param>
        <param>
          <type>const Vector&lt; T, Size &gt; &amp;</type>
          <declname>t_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" line="65" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" bodystart="65" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8h_1ad38dad2ca84a42832c99c8a018b6aa1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; idol::flatten</definition>
        <argsstring>(const Vector&lt; T, Size &gt; &amp;t_vector)</argsstring>
        <name>flatten</name>
        <param>
          <type>const Vector&lt; T, Size &gt; &amp;</type>
          <declname>t_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" line="82" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" bodystart="82" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8h_1a31d7534e1c1409f5e9dee0802d9c4549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void idol::apply</definition>
        <argsstring>(Vector&lt; T, Size &gt; &amp;t_vec, const std::function&lt; void(T &amp;)&gt; &amp;t_function)</argsstring>
        <name>apply</name>
        <param>
          <type>Vector&lt; T, Size &gt; &amp;</type>
          <declname>t_vec</declname>
        </param>
        <param>
          <type>const std::function&lt; void(T &amp;)&gt; &amp;</type>
          <declname>t_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" line="102" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" bodystart="102" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8h_1a49ca0a432e16df5f1581f419e9649c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void idol::apply</definition>
        <argsstring>(const Vector&lt; T, Size &gt; &amp;t_vec, const std::function&lt; void(const T &amp;)&gt; &amp;t_function)</argsstring>
        <name>apply</name>
        <param>
          <type>const Vector&lt; T, Size &gt; &amp;</type>
          <declname>t_vec</declname>
        </param>
        <param>
          <type>const std::function&lt; void(const T &amp;)&gt; &amp;</type>
          <declname>t_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" line="122" column="10" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" bodystart="122" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8h_1abb2c5502ed707c43f6cff4226fc9a165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>Vector&lt; U, Size &gt;</type>
        <definition>Vector&lt;U, Size&gt; idol::transform</definition>
        <argsstring>(const Vector&lt; T, Size &gt; &amp;t_vec, const std::function&lt; U(const T &amp;)&gt; &amp;t_function)</argsstring>
        <name>transform</name>
        <param>
          <type>const Vector&lt; T, Size &gt; &amp;</type>
          <declname>t_vec</declname>
        </param>
        <param>
          <type>const std::function&lt; U(const T &amp;)&gt; &amp;</type>
          <declname>t_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" line="141" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/general/utils/Vector.h" bodystart="141" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="TempCtr_8h_1ab0fb7afe1e08b6b0d7b945b397949969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const TempCtr &amp;t_temp_ctr)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1TempCtr" kindref="compound">TempCtr</ref> &amp;</type>
          <declname>t_temp_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/constraints/TempCtr.h" line="122" column="5" declfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/constraints/TempCtr.h" declline="122" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="TempQCtr_8h_1a420eace891f1e9bea2ebcd1aba59e642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const TempQCtr &amp;t_temp_ctr)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1TempQCtr" kindref="compound">TempQCtr</ref> &amp;</type>
          <declname>t_temp_ctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/constraints/TempQCtr.h" line="43" column="5" declfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/constraints/TempQCtr.h" declline="43" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="AffExpr_8h_1a4ce0041de2edc8afdde829fa77d67919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Key1</type>
          </param>
          <param>
            <type>class ValueT</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const idol::AffExpr&lt; Key1, ValueT &gt; &amp;t_expr)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">idol::AffExpr</ref>&lt; Key1, ValueT &gt; &amp;</type>
          <declname>t_expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/AffExpr.h" line="121" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/AffExpr.h" bodystart="121" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="LinExpr_8h_1af079d370530e78292c46c9f68d8e5d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyT</type>
          </param>
          <param>
            <type>class ValueT</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const LinExpr&lt; KeyT, ValueT &gt; &amp;t_expr)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; KeyT, ValueT &gt; &amp;</type>
          <declname>t_expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/LinExpr.h" line="93" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/LinExpr.h" bodystart="93" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a04eecb192ebe16f70c72d9d1f450cd75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double idol::evaluate</definition>
        <argsstring>(const LinExpr&lt; T, double &gt; &amp;t_expr, const Point&lt; T &gt; &amp;t_values)</argsstring>
        <name>evaluate</name>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; T, double &gt; &amp;</type>
          <declname>t_expr</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;</type>
          <declname>t_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="16" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="16" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1afd505d1903504f48630bc459a2355c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double idol::evaluate</definition>
        <argsstring>(const AffExpr&lt; T, double &gt; &amp;t_expr, const Point&lt; T &gt; &amp;t_values)</argsstring>
        <name>evaluate</name>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; T, double &gt; &amp;</type>
          <declname>t_expr</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;</type>
          <declname>t_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="27" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a825dc9f57a15b4332332a5c2aa75cd1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double idol::evaluate</definition>
        <argsstring>(const QuadExpr&lt; T, double &gt; &amp;t_expr, const Point&lt; T &gt; &amp;t_values)</argsstring>
        <name>evaluate</name>
        <param>
          <type>const <ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; T, double &gt; &amp;</type>
          <declname>t_expr</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Point" kindref="compound">Point</ref>&lt; T &gt; &amp;</type>
          <declname>t_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="32" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="32" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a6bc743630c0d4151a151866b5ecc7170" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyT</type>
          </param>
          <param>
            <type>class ValueT</type>
          </param>
          <param>
            <type>class PointT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; KeyT &gt;</type>
        <definition>LinExpr&lt;KeyT&gt; idol::evaluate</definition>
        <argsstring>(const SparseVector&lt; KeyT, ValueT &gt; &amp;t_pattern, const PointT &amp;t_values)</argsstring>
        <name>evaluate</name>
        <param>
          <type>const <ref refid="classidol_1_1SparseVector" kindref="compound">SparseVector</ref>&lt; KeyT, ValueT &gt; &amp;</type>
          <declname>t_pattern</declname>
        </param>
        <param>
          <type>const PointT &amp;</type>
          <declname>t_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="43" column="13" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="43" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ab55db999b91c8f9d5ce8067bab611db5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(double t_a, LinExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="22" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a8fa76eb103b0db893cda0f2ec93a398f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(LinExpr&lt; Var &gt; t_a, double t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="154" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a415e37180a12734992a0036ec05a851a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(double t_a, AffExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="286" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1af32005b73b6a58473a732573de2446f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(AffExpr&lt; Var &gt; t_a, double t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="418" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a8e8ddd489c5c036a7813c9ac2a1dc3b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(double t_a, QuadExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="551" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a01e669f17914e1c95caeaee0876ece3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(QuadExpr&lt; Var &gt; t_a, double t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="685" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a828586d949aaefd211c036084d1f15d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(Var t_a, double t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="820" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aee9554f37b4905fbf1d08913e0abca9b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(double t_a, Var t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="950" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aca06ac7d1084312b32a372ba93deacdc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(Var t_a, Var t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="1080" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a82e199306462dd04c16f908018667ae4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(Var t_a, LinExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="1210" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a5398d367ffd0594d09aa2ff5f70d3727" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(LinExpr&lt; Var &gt; t_a, Var t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="1342" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a260a1d16adcbd691ae8aa96309a8c2a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(Var t_a, AffExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="1474" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a3ec28826d77caa10cf918669fdd82c17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(AffExpr&lt; Var &gt; t_a, Var t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="1606" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1adcb87f129192c3e434240d9e4eb03564" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(Var t_a, QuadExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="1739" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a3d89ed835aad6bc92254db18598f0eca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(QuadExpr&lt; Var &gt; t_a, Var t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="1873" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a75f3d77cbe91e45b3ec7443a31ce892b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(LinExpr&lt; Var &gt; t_a, LinExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="2008" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aa5ae7017ce2fd5ecbeb63c31d60a484c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(LinExpr&lt; Var &gt; t_a, AffExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="2142" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a7105cdd1f1499212fae736f3543ee698" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(AffExpr&lt; Var &gt; t_a, LinExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="2276" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a22dec26e5216f63dda65093d852b6900" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(LinExpr&lt; Var &gt; t_a, QuadExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="2411" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a29d4b9a26a869b1e5fa5dc201ed5d063" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(QuadExpr&lt; Var &gt; t_a, LinExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="2547" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a9825b5718dbd38873bfd93064694ef15" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(AffExpr&lt; Var &gt; t_a, QuadExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="2685" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a53ed1c2ae7e0ed6ea1883f4d84660bfa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(QuadExpr&lt; Var &gt; t_a, AffExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="2821" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a3ed62bfc00cb5b208fc1dceadb444b83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(AffExpr&lt; Var &gt; t_a, AffExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="2956" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a7d3c86602d25376724ef96d9a27108f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator+</definition>
        <argsstring>(QuadExpr&lt; Var &gt; t_a, QuadExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="3093" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ac759eef38899208c263b2aaa3680e922" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(double t_a, Var t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="3230" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a9bb585a5ddff1e6f65d8e4fa79ac94be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(Var t_a, double t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="3360" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a447dcb283359a5b91d0860db892920af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(double t_a, LinExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="3490" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ac72165800255058df8f430be4a5eb210" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(LinExpr&lt; Var &gt; t_a, double t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="3622" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a0d25b9d06394714db1d8f3e88d1e3b7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(double t_a, AffExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="3754" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a952a611d0e8811b2696042f0d8f12434" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(AffExpr&lt; Var &gt; t_a, double t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="3886" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1af76bbd9d46f7b191d6e0806ec7ee15f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(double t_a, QuadExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="4019" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a7e5f885c9be28a022413adcff6a5e955" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(QuadExpr&lt; Var &gt; t_a, double t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="4153" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a3fa77a3e0422c7174448e057efcb2a19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(Var t_a, Var t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="4288" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a2475b906117238041ddba71185f2604f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(Var t_a, LinExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="4418" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ab0dbeddeb155e3dc56459f160081019a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(LinExpr&lt; Var &gt; t_a, Var t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="4550" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aacec8768b2cc96db2b508dd87225035f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(Var t_a, AffExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="4682" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a76d52587ee77ef4902f62d4c23f0fd8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(AffExpr&lt; Var &gt; t_a, Var t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="4814" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a6c8f23a6f4a953472e02ea432773c189" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(Var t_a, QuadExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="4947" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1acd7a7e1bbf2ddcddfa8618b4c4d421cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(QuadExpr&lt; Var &gt; t_a, Var t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="5081" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aaabeed1475b8f92ad9d2d046483094fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(LinExpr&lt; Var &gt; t_a, LinExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="5216" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aad8637537afc6c3f4f3d814a3d90b5e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(LinExpr&lt; Var &gt; t_a, AffExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="5350" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aaac2fd6044c7be1e2de0198032607cbf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(AffExpr&lt; Var &gt; t_a, LinExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="5484" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ab5715e8c4a54b15d3b2a7e18f46fa36e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(LinExpr&lt; Var &gt; t_a, QuadExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="5619" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a79bde98695388cb140ce46e97d5d6620" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(QuadExpr&lt; Var &gt; t_a, LinExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="5755" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a5e2f50c677ca893f2183388942138afe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(AffExpr&lt; Var &gt; t_a, AffExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="5892" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ad77921f649d28ea4487b8f08d462056c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(AffExpr&lt; Var &gt; t_a, QuadExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="6027" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a59a025d5a15084493657d94ba72e9e60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(QuadExpr&lt; Var &gt; t_a, AffExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="6163" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a042e81eb37fa4772c41d387063517e72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator-</definition>
        <argsstring>(QuadExpr&lt; Var &gt; t_a, QuadExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="6301" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aa2df08c65e107eac4e09a80d0d39cc37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(double t_a, Var t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="6438" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a38e5012dfa7c4ab02d76e6a0b871d04e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(Var t_a, double t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="6568" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a92281f9221145621f10862338900684e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(double t_a, LinExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="6698" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a2a7b78a4f55c2be870e10e931cc50170" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(LinExpr&lt; Var &gt; t_a, double t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="6830" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1adf13bb9f215674d6b3e6ddbf112ebce1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(double t_a, AffExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="6962" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ade737bbd2e63c8880a7648511bde9822" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(AffExpr&lt; Var &gt; t_a, double t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="7094" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a6fbf9c7624d01b29bf69bbc5ec36ae8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(double t_a, QuadExpr&lt; Var &gt; t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="7227" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aaf01ff466bdb3648ba1d069dd47c1f4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(QuadExpr&lt; Var &gt; t_a, double t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="7361" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a24f722484e252a12554ffa75dd81c667" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(Var t_a, Var t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Var" kindref="compound">Var</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="7494" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a5664f370faf43b90508e6bc5902400c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref>, double &gt;</type>
        <definition>static LinExpr&lt; Var , double&gt; idol::operator+</definition>
        <argsstring>(const Var &amp;t_a)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="7549" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1acbc6ad6e207e8805da737f9988bf749d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref>, double &gt;</type>
        <definition>static LinExpr&lt; Var , double&gt; idol::operator-</definition>
        <argsstring>(const Var &amp;t_a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="7593" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ac4aced6cafd0a1779c761c9450f96e0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(const Var &amp;t_a, const LinExpr&lt; Var &gt; &amp;t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="7645" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a4be2663e82a58f22ee2aa87dbcbfb8f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(const LinExpr&lt; Var &gt; &amp;t_a, const Var &amp;t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="7807" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a5415f89faec2ebf373d7b73d7e9006d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(const Var &amp;t_a, const AffExpr&lt; Var &gt; &amp;t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="7863" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a7360c7e544e7dd80add7d27706eb1d0c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator*</definition>
        <argsstring>(const AffExpr&lt; Var &gt; &amp;t_a, const Var &amp;t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="7951" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1acea861da26edcfd7fbe306da5ac6d11a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator/</definition>
        <argsstring>(const Var &amp;t_a, double t_b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="8006" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ab616a42cc9c036e3ab92ad21af8233a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static LinExpr&lt; Var &gt; idol::operator/</definition>
        <argsstring>(const LinExpr&lt; Var &gt; &amp;t_a, double t_b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="8062" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aaec62d86f47288ac7eb7aed7738bc829" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static AffExpr&lt; Var &gt; idol::operator/</definition>
        <argsstring>(const AffExpr&lt; Var &gt; &amp;t_a, double t_b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="8118" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ae22b4544a1ec42d9fde084cb601e8063" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt;</type>
        <definition>static QuadExpr&lt; Var &gt; idol::operator/</definition>
        <argsstring>(const QuadExpr&lt; Var &gt; &amp;t_a, double t_b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="148" column="8175" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a9e1714960647e333ec179d32f553faa6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(double t_a, LinExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="22" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a61277d155932334293e29a652a862c59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(LinExpr&lt; Ctr &gt; t_a, double t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="154" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aaad474cff6ef923419936a1f86b77619" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(double t_a, AffExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="286" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a96b92f9d9ebbe9975da7e10e528cf873" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(AffExpr&lt; Ctr &gt; t_a, double t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="418" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a415a76392663c557da876cb3485844b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(double t_a, QuadExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="551" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a391ddc0a993011dd13896a67099aa152" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(QuadExpr&lt; Ctr &gt; t_a, double t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="685" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ab88bc00758fab13d8af7dc10e905842b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(Ctr t_a, double t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="820" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a8bc55e5a76c30c11acb6ce9046432a60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(double t_a, Ctr t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="950" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a0d029a42a4974f60904b6a6b277a247b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(Ctr t_a, Ctr t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="1080" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a302e13db40136d77ff8d1dd6bbdca887" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(Ctr t_a, LinExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="1210" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a613e65bb9a1ad1f52d73f4f202c5e44b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(LinExpr&lt; Ctr &gt; t_a, Ctr t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="1342" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a81411f70ded713009cb9b465159d973f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(Ctr t_a, AffExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="1474" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ac049666540580b2a759f4ac95f66d956" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(AffExpr&lt; Ctr &gt; t_a, Ctr t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="1606" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ab3e0f5b1b6e7426ca05dca53953246d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(Ctr t_a, QuadExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="1739" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ac343e7775e777fa538905abe99919777" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(QuadExpr&lt; Ctr &gt; t_a, Ctr t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="1873" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a64ff4871ed33095aca16cf7b8a29fc10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(LinExpr&lt; Ctr &gt; t_a, LinExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="2008" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a5ef51fbb2ff8a2c38c0a3fa4b39474c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(LinExpr&lt; Ctr &gt; t_a, AffExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="2142" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aa85386d83e2bd382e79903b7d550ae06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(AffExpr&lt; Ctr &gt; t_a, LinExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="2276" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aa4841335adb53e047aedae403ddd1d84" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(LinExpr&lt; Ctr &gt; t_a, QuadExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="2411" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a5aed308f2017636ddc75ed91a3f773d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(QuadExpr&lt; Ctr &gt; t_a, LinExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="2547" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a96598b1639ae017e18575288f52b595b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(AffExpr&lt; Ctr &gt; t_a, QuadExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="2685" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a92d1802013ea0df13421e9bc0a7c5a2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(QuadExpr&lt; Ctr &gt; t_a, AffExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="2821" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ad63c208a6cb9cf0e77cca7dcc0c07ef5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(AffExpr&lt; Ctr &gt; t_a, AffExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="2956" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1afe1f7e4fc15907aacc8262ac168862f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator+</definition>
        <argsstring>(QuadExpr&lt; Ctr &gt; t_a, QuadExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="3093" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a0e774b3ce4cdeecb0ece6ad9d4ab8c0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(double t_a, Ctr t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="3230" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a06568b910a8f893076270ed4ad4d9e31" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(Ctr t_a, double t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="3360" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a74796f3b79ede052f8e6d4f9106efeef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(double t_a, LinExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="3490" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1aeba081bae41eb2983b56f8eb407e6169" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(LinExpr&lt; Ctr &gt; t_a, double t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="3622" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a50914760c0a53d14fc8213764ee5eb38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(double t_a, AffExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="3754" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a4f8e98ad2a46a1b94dc59a82a44bd905" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(AffExpr&lt; Ctr &gt; t_a, double t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="3886" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a4ec55aed690989e1a1e830e1b36ba9f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(double t_a, QuadExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="4019" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ae74f55c39bbe4ac1e1651ae3f46aa66a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(QuadExpr&lt; Ctr &gt; t_a, double t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="4153" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a2f2c7486c01ee007894de59f03fb75f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(Ctr t_a, Ctr t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="4288" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a9f6758d3b810354bad282d88758c8ba5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(Ctr t_a, LinExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="4418" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a89cfae03a6b9e222457dd5d4b60352eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(LinExpr&lt; Ctr &gt; t_a, Ctr t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="4550" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ab077836e9fbedbfd4f4c1581cccb4936" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(Ctr t_a, AffExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="4682" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a263acae40729389c00db419fee9242bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(AffExpr&lt; Ctr &gt; t_a, Ctr t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="4814" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ac2bb4b7ddac234491066e2e338674e4c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(Ctr t_a, QuadExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="4947" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a94384ec3b156058ed1dd33074e3f4601" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(QuadExpr&lt; Ctr &gt; t_a, Ctr t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="5081" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a4bde785a6a2e4da406766efb80766c4b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(LinExpr&lt; Ctr &gt; t_a, LinExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="5216" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a9034d8a9224857fa561defe9873fd6b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(LinExpr&lt; Ctr &gt; t_a, AffExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="5350" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a13b61d31048e920479625921c8ac2690" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(AffExpr&lt; Ctr &gt; t_a, LinExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="5484" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1acae7e7e6cb59264755d88efab4bf678a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(LinExpr&lt; Ctr &gt; t_a, QuadExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="5619" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a78e8b212c655953916ead7c1f0ebba75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(QuadExpr&lt; Ctr &gt; t_a, LinExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="5755" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a3f68cb0957fd493d6521ab95cba8bfd2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(AffExpr&lt; Ctr &gt; t_a, AffExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="5892" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a0cea388f1a29a6a788783fba59076f61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(AffExpr&lt; Ctr &gt; t_a, QuadExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="6027" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a18edd5a82b1b947a74560e8d3bd9fb24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(QuadExpr&lt; Ctr &gt; t_a, AffExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="6163" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a6d1a90098ecdee9e3b69688bff6b2cce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator-</definition>
        <argsstring>(QuadExpr&lt; Ctr &gt; t_a, QuadExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="6301" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ae20f3e3b66b62162d1e32f0f8bdfe9a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(double t_a, Ctr t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="6438" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a0d07476ee6558dabd80903133a2fbea4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(Ctr t_a, double t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="6568" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a4f21d4242158d520e364a6fbe18aa92b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(double t_a, LinExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="6698" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1abfafaf43a31e0659efd2f5b7831c7f30" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(LinExpr&lt; Ctr &gt; t_a, double t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="6830" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a83c4c0de27c9a34b538ddd370089ea52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(double t_a, AffExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="6962" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a86ee2f9c44d8cb1db54f478ea494ee01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(AffExpr&lt; Ctr &gt; t_a, double t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="7094" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a8b68301639409710ba0f005567df877e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(double t_a, QuadExpr&lt; Ctr &gt; t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="7227" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a8df8525dce4e75e9cf47da86ab3e83d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(QuadExpr&lt; Ctr &gt; t_a, double t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="7361" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ac9584d6da45a04d8eec4d5260ebe82be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(Ctr t_a, Ctr t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref></type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="7494" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1ae82a80cdba4f0c0386e4d8f9f01fb623" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref>, double &gt;</type>
        <definition>static LinExpr&lt; Ctr , double&gt; idol::operator+</definition>
        <argsstring>(const Ctr &amp;t_a)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="7549" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a53dae99fd97bfa9ea0c47059e0ce4bf2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref>, double &gt;</type>
        <definition>static LinExpr&lt; Ctr , double&gt; idol::operator-</definition>
        <argsstring>(const Ctr &amp;t_a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="7593" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a27fe481a21e2cb26e6f796649dada517" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(const Ctr &amp;t_a, const LinExpr&lt; Ctr &gt; &amp;t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt; &amp;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="7645" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a86d3a13766a6d86c99b5e937c0f2c518" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(const LinExpr&lt; Ctr &gt; &amp;t_a, const Ctr &amp;t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt; &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="7807" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a6ccba7b0dcf6938fb1eab9df25c4a2e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(const Ctr &amp;t_a, const AffExpr&lt; Ctr &gt; &amp;t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt; &amp;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="7863" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1af4177f67f47ecc807dbffcfede06b416" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator*</definition>
        <argsstring>(const AffExpr&lt; Ctr &gt; &amp;t_a, const Ctr &amp;t_b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt; &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="7951" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a1758718aa1edf4b8db50fdd4c186eddb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator/</definition>
        <argsstring>(const Ctr &amp;t_a, double t_b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="8006" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a4952353d636dc09e7729dbe17342d740" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static LinExpr&lt; Ctr &gt; idol::operator/</definition>
        <argsstring>(const LinExpr&lt; Ctr &gt; &amp;t_a, double t_b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classidol_1_1LinExpr" kindref="compound">LinExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt; &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="8062" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a37c15a5afe1886e1d4e892fcb5432422" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static AffExpr&lt; Ctr &gt; idol::operator/</definition>
        <argsstring>(const AffExpr&lt; Ctr &gt; &amp;t_a, double t_b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classidol_1_1AffExpr" kindref="compound">AffExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt; &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="8118" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="operators_8h_1a3eb9aa58a72b3c9fe94aa3b801689485" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt;</type>
        <definition>static QuadExpr&lt; Ctr &gt; idol::operator/</definition>
        <argsstring>(const QuadExpr&lt; Ctr &gt; &amp;t_a, double t_b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; <ref refid="classidol_1_1Ctr" kindref="compound">Ctr</ref> &gt; &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" line="149" column="8175" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/operations/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="QuadExpr_8h_1ac8ea2dc6039eb5c77ffb744c51b2cecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyT</type>
          </param>
          <param>
            <type>class ValueT</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const QuadExpr&lt; KeyT, ValueT &gt; &amp;t_expr)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1QuadExpr" kindref="compound">QuadExpr</ref>&lt; KeyT, ValueT &gt; &amp;</type>
          <declname>t_expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/QuadExpr.h" line="107" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/expressions/QuadExpr.h" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="Model_8h_1a5f59f87be75b02a50eb127e390238d22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto idol::save_primal</definition>
        <argsstring>(const Model &amp;t_original_model, const Model &amp;t_model)</argsstring>
        <name>save_primal</name>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_original_model</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="335" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="335" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="Model_8h_1a11475dec85f604a2f6be435c8cc85b1c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto idol::save_primal</definition>
        <argsstring>(const Model &amp;t_original_model)</argsstring>
        <name>save_primal</name>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_original_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="360" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="360" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="Model_8h_1a51e8e3e537595561d01a451aedf2cce0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto idol::save_ray</definition>
        <argsstring>(const Model &amp;t_original_model, const Model &amp;t_model)</argsstring>
        <name>save_ray</name>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_original_model</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="364" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="364" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="Model_8h_1a7a1e13f867e293717df805edad89e1ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto idol::save_ray</definition>
        <argsstring>(const Model &amp;t_original_model)</argsstring>
        <name>save_ray</name>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_original_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="389" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="389" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="Model_8h_1a3fbc6cb48087afcf8dfdda8c0270444d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto idol::save_dual</definition>
        <argsstring>(const Model &amp;t_original_model, const Model &amp;t_model)</argsstring>
        <name>save_dual</name>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_original_model</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="393" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="393" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="Model_8h_1a0246b040694d7c2c42523b1d7c17cc53" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto idol::save_dual</definition>
        <argsstring>(const Model &amp;t_original_model)</argsstring>
        <name>save_dual</name>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_original_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="418" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="418" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="Model_8h_1a2ddfc42670f15154ed2b0cd83d1c2488" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto idol::save_farkas</definition>
        <argsstring>(const Model &amp;t_original_model, const Model &amp;t_model)</argsstring>
        <name>save_farkas</name>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_original_model</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="422" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="422" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="Model_8h_1a08de7aa2118ea6ed5f8dbd2f6f1ce2f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto idol::save_farkas</definition>
        <argsstring>(const Model &amp;t_original_model)</argsstring>
        <name>save_farkas</name>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_original_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="447" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="447" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="Model_8h_1ad74db2f132e9e71b7a4a1fadcec4c7e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto idol::save_reduced_cost</definition>
        <argsstring>(const Model &amp;t_original_model, const Model &amp;t_model)</argsstring>
        <name>save_reduced_cost</name>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_original_model</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="451" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="451" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="Model_8h_1a8b39e366a9d505b6b6cc5515d1356215" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto idol::save_reduced_cost</definition>
        <argsstring>(const Model &amp;t_original_model)</argsstring>
        <name>save_reduced_cost</name>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>t_original_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="476" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="476" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="Model_8h_1a1a570435a9e303f16c20aae2fbdedd98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const idol::Model &amp;t_model)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Model" kindref="compound">idol::Model</ref> &amp;</type>
          <declname>t_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" line="484" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/models/Model.h" bodystart="484" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="Object_8h_1a9489fbadf5f496c0886022d032c230fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class CRTP</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const Object&lt; T, CRTP &gt; &amp;t_var)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Object" kindref="compound">Object</ref>&lt; T, CRTP &gt; &amp;</type>
          <declname>t_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/objects/Object.h" line="102" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/objects/Object.h" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="Param_8h_1add8f3d09155772f9e1704a870f36b55a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const idol::Param &amp;t_param)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Param" kindref="compound">idol::Param</ref> &amp;</type>
          <declname>t_param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/parameters/Param.h" line="119" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/parameters/Param.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="Types_8h_1a0dfd08f8a48fb694c6a7b5ec7f5d846f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, VarType t_type)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>VarType</type>
          <declname>t_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" line="29" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" bodystart="29" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="Types_8h_1adab6cfb504c3e98309252146e77086cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, CtrType t_type)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>CtrType</type>
          <declname>t_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" line="42" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" bodystart="42" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="Types_8h_1a3a5d5cfd7c72aa5326770191f7d68489" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, ObjectiveSense t_type)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>ObjectiveSense</type>
          <declname>t_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" line="55" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/modeling/Types.h" bodystart="55" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="BranchAndBound_8h_1a3dd805043985048ac2d8bf23a2686812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NodeInfoT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classidol_1_1BranchAndBound" kindref="compound">BranchAndBound</ref>&lt; NodeInfoT &gt;</type>
        <definition>BranchAndBound&lt;NodeInfoT&gt; idol::operator+</definition>
        <argsstring>(const BranchAndBound&lt; NodeInfoT &gt; &amp;t_branch_and_bound, const OptimizerFactory &amp;t_node_optimizer)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classidol_1_1BranchAndBound" kindref="compound">BranchAndBound</ref>&lt; NodeInfoT &gt; &amp;</type>
          <declname>t_branch_and_bound</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1OptimizerFactory" kindref="compound">OptimizerFactory</ref> &amp;</type>
          <declname>t_node_optimizer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/BranchAndBound.h" line="372" column="20" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/BranchAndBound.h" bodystart="372" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="Callback_8h_1ac01cadffab814ca4ab41f864598c9d01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, idol::CallbackEvent t_event)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>idol::CallbackEvent</type>
          <declname>t_event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/callbacks/Callback.h" line="27" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/callbacks/Callback.h" bodystart="27" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="PenaltyUpdates_8h_1a79c6b0bb6ba332926f3ee139038dc6a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const PenaltyUpdate &amp;t_penalty_update)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1PenaltyUpdate" kindref="compound">PenaltyUpdate</ref> &amp;</type>
          <declname>t_penalty_update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/padm/PenaltyUpdates.h" line="22" column="5" declfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/padm/PenaltyUpdates.h" declline="22" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="distances_8h_1a4943b15cf7bd8a3171eae563c23d1121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double idol::euclidean</definition>
        <argsstring>(const std::pair&lt; double, double &gt; &amp;a, const std::pair&lt; double, double &gt; &amp;b)</argsstring>
        <name>euclidean</name>
        <param>
          <type>const std::pair&lt; double, double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::pair&lt; double, double &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the Euclidean distance between two points (x,y). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/problems/helpers/distances.h" line="15" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/problems/helpers/distances.h" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="distances_8h_1a9319bf9f1262551cc3d84240d296bece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double idol::haversine</definition>
        <argsstring>(const std::pair&lt; double, double &gt; &amp;t_a, const std::pair&lt; double, double &gt; &amp;t_b)</argsstring>
        <name>haversine</name>
        <param>
          <type>const std::pair&lt; double, double &gt; &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type>const std::pair&lt; double, double &gt; &amp;</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the haversine distance between two points (lat, lon). See <ulink url="https://www.geeksforgeeks.org/haversine-formula-to-find-distance-between-two-points-on-a-sphere/">https://www.geeksforgeeks.org/haversine-formula-to-find-distance-between-two-points-on-a-sphere/</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/problems/helpers/distances.h" line="23" column="12" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/problems/helpers/distances.h" bodystart="23" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="parse__delimited_8h_1a489a6282986b122e5eb44d6b5cb357c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;std::string&gt; &gt; idol::parse_delimited</definition>
        <argsstring>(const std::string &amp;t_filename, char t_delimiter)</argsstring>
        <name>parse_delimited</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_filename</declname>
        </param>
        <param>
          <type>char</type>
          <declname>t_delimiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/problems/helpers/parse_delimited.h" line="14" column="17" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/problems/helpers/parse_delimited.h" bodystart="14" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="robust_2modeling_2Description_8h_1abc0677b5f150db591f06f3979674740f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; idol::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;t_os, const idol::Robust::Description::View &amp;t_view)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>t_os</declname>
        </param>
        <param>
          <type>const <ref refid="classidol_1_1Robust_1_1Description_1_1View" kindref="compound">idol::Robust::Description::View</ref> &amp;</type>
          <declname>t_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/robust/modeling/Description.h" line="84" column="5" declfile="/home/henri/Research/idol/lib/include/idol/robust/modeling/Description.h" declline="84" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/henri/Research/idol/lib/include/idol/bilevel/modeling/Description.h" line="15" column="1"/>
  </compounddef>
</doxygen>
