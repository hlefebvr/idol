<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classidol_1_1VariableBranching" kind="class" language="C++" prot="public">
    <compoundname>idol::VariableBranching</compoundname>
    <derivedcompoundref refid="classidol_1_1Diver" prot="public" virt="non-virtual">idol::Diver&lt; BranchingRuleT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classidol_1_1FirstInfeasibleFound" prot="public" virt="non-virtual">idol::FirstInfeasibleFound</derivedcompoundref>
    <derivedcompoundref refid="classidol_1_1LeastInfeasible" prot="public" virt="non-virtual">idol::LeastInfeasible</derivedcompoundref>
    <derivedcompoundref refid="classidol_1_1MostInfeasible" prot="public" virt="non-virtual">idol::MostInfeasible</derivedcompoundref>
    <derivedcompoundref refid="classidol_1_1PseudoCost" prot="public" virt="non-virtual">idol::PseudoCost</derivedcompoundref>
    <derivedcompoundref refid="classidol_1_1StrongBranching" prot="public" virt="non-virtual">idol::StrongBranching</derivedcompoundref>
    <derivedcompoundref refid="classidol_1_1UniformlyRandom" prot="public" virt="non-virtual">idol::UniformlyRandom</derivedcompoundref>
    <innerclass refid="classidol_1_1VariableBranching_1_1Strategy" prot="public">idol::VariableBranching::Strategy</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classidol_1_1VariableBranching_1a99535846f6e0f95fc7a138f4ca1ffe37" prot="private" static="no" mutable="no">
        <type>std::optional&lt; std::list&lt; <ref refid="classidol_1_1Var" kindref="compound">Var</ref> &gt; &gt;</type>
        <definition>std::optional&lt;std::list&lt;Var&gt; &gt; idol::VariableBranching::m_explicit_branching_candidates</definition>
        <argsstring></argsstring>
        <name>m_explicit_branching_candidates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/VariableBranching.h" line="19" column="19" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/VariableBranching.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classidol_1_1VariableBranching_1a9f69d45cd7be3ee963378bba6ac455ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>idol::VariableBranching::VariableBranching</definition>
        <argsstring>()=default</argsstring>
        <name>VariableBranching</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/VariableBranching.h" line="21" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classidol_1_1VariableBranching_1aba812527d80c1a4d8c05938c04029858" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorT</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>idol::VariableBranching::VariableBranching</definition>
        <argsstring>(IteratorT t_begin, IteratorT t_end)</argsstring>
        <name>VariableBranching</name>
        <param>
          <type>IteratorT</type>
          <declname>t_begin</declname>
        </param>
        <param>
          <type>IteratorT</type>
          <declname>t_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/VariableBranching.h" line="24" column="5" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/VariableBranching.h" bodystart="24" bodyend="30"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>idol::VariableBranching</label>
        <link refid="classidol_1_1VariableBranching"/>
      </node>
      <node id="8">
        <label>idol::UniformlyRandom</label>
        <link refid="classidol_1_1UniformlyRandom"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>idol::Diver&lt; BranchingRuleT &gt;</label>
        <link refid="classidol_1_1Diver"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>idol::MostInfeasible</label>
        <link refid="classidol_1_1MostInfeasible"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>idol::PseudoCost</label>
        <link refid="classidol_1_1PseudoCost"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>idol::LeastInfeasible</label>
        <link refid="classidol_1_1LeastInfeasible"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>idol::StrongBranching</label>
        <link refid="classidol_1_1StrongBranching"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>idol::FirstInfeasibleFound</label>
        <link refid="classidol_1_1FirstInfeasibleFound"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>idol::VariableBranching</label>
        <link refid="classidol_1_1VariableBranching"/>
      </node>
    </collaborationgraph>
    <location file="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/VariableBranching.h" line="18" column="1" bodyfile="/home/henri/Research/idol/lib/include/idol/mixed-integer/optimizers/branch-and-bound/branching-rules/factories/VariableBranching.h" bodystart="18" bodyend="56"/>
    <listofallmembers>
      <member refid="classidol_1_1VariableBranching_1a99535846f6e0f95fc7a138f4ca1ffe37" prot="private" virt="non-virtual"><scope>idol::VariableBranching</scope><name>m_explicit_branching_candidates</name></member>
      <member refid="classidol_1_1VariableBranching_1a9f69d45cd7be3ee963378bba6ac455ca" prot="public" virt="non-virtual"><scope>idol::VariableBranching</scope><name>VariableBranching</name></member>
      <member refid="classidol_1_1VariableBranching_1aba812527d80c1a4d8c05938c04029858" prot="public" virt="non-virtual"><scope>idol::VariableBranching</scope><name>VariableBranching</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
